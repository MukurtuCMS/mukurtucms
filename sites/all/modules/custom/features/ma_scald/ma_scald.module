<?php

/**
 * @file
 * Code for the Murkutu Scald feature.
 */

include_once 'ma_scald.features.inc';

/**
 * Implements hook_boot().
 */
function ma_scald_boot() {
  global $conf;
  // The default scald deletion message doesn't make sense because we hide the fetch checkbox, so we remove that message.
  $scald_message = array(
   '<p>Note that unchecking the Fetch checkbox in the "<em>Openly available actions</em>" field of this atom <a href="!url">edit form</a> makes the atom disappear for everyone but Scald administrators, and is usually a better idea.</p><p>This action cannot be undone.</p>'      => '<p>This action cannot be undone.</p>',
   );
  $conf['locale_custom_strings_en'][''] = array_merge($conf['locale_custom_strings_en'][''], $scald_message);
}

/**
 * Implements hook_ds_fields_info().
 */
function ma_scald_ds_fields_info($entity_type) {
  $fields = array();

  // Custom DS field to download atom
  $fields['download_atom'] = array(
    'title' => t('Scald Atom Download Link'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|ma_colorbox'),
    'function' => 'ma_scald_atom_download_link',
  );

  return array('scald_atom' => $fields);
}

/**
 * Implements hook_scald_atom_access().
 *
 * Handle very specific scald delete access cases
 */
function ma_scald_scald_atom_access($atom, $action, $account = NULL) {
    global $user;

    $user_account = $account;
    if($user_account == NULL) {
        $user_account = $user;
    }

    switch ($action) {
    case 'delete':
        // Let users delete their own atoms if they aren't being used somewhere
        if(user_access('delete any atom') || (user_access('delete own atom') && $atom->publisher == $user->uid)) {
            $references = ma_scald_get_atom_references($atom);

            if(empty($references)) {
                return SCALD_ATOM_ACCESS_ALLOW;
            } else {
                return SCALD_ATOM_ACCESS_DENY;
            }
        }
        return SCALD_ATOM_ACCESS_DENY;
        break;
    }

    return SCALD_ATOM_ACCESS_IGNORE;
}

// Return an array of content where the given atom is referenced
// TODO: This can be an expensive function. We might be able to extend the scald_index module to catch the
// elements it misses.
function ma_scald_get_atom_references($atom) {
    if(is_string($atom) && is_numeric($atom)) {
        $atom = scald_atom_load($atom);
    }

    if(!isset($atom->sid)) {
        return array();
    }

    // Get all atom reference field names
    $fields = field_info_fields();
    foreach($fields as $key => $field) {
        if($field['type'] != 'atom_reference') {
            unset($fields[$key]);
        }
    }
    $field_names = array_keys($fields);

    // For each atom reference field, check if this particular atom is being referenced
    $references = array();
    foreach($field_names as $field_name) {
        $query = new EntityFieldQuery();
        $query->fieldCondition($field_name, 'sid', $atom->sid, "=")
            ->addMetaData('account', user_load(1));
        $result = $query->execute();

        if(!empty($result)) {
            foreach($result as $entity_type_name => $entity_type) {
                $references[$entity_type_name] = array_merge(isset($references[$entity_type_name]) ? $references[$entity_type_name] : array(), array_keys($entity_type));
            }
        }
    }

    // Atoms can also be references in DnD fields, check those now
    $scald_dnd_fields = ma_scald_get_dnd_enabled_scald_fields();

    foreach($scald_dnd_fields as $entity_type_name => $entity_type) {
        foreach($entity_type as $bundle_name => $bundle) {
            foreach($bundle as $field_name) {
                $query = new EntityFieldQuery();
                $query->entityCondition('entity_type', $entity_type_name)
                    ->entityCondition('bundle', $bundle_name)
                    ->fieldCondition($field_name, 'value', "%[scald={$atom->sid}:%", 'like')
                    ->addMetaData('account', user_load(1));
                $result = $query->execute();
                if(!empty($result)) {
                    foreach($result as $entity_type_name => $entity_type) {
                        $references[$entity_type_name] = array_merge(isset($references[$entity_type_name]) ? $references[$entity_type_name] : array(), array_keys($entity_type));
                    }
                }
            }
        }
    }

    foreach($references as $entity_type_name => $entity_type) {
        $references[$entity_type_name] = array_unique($references[$entity_type_name]);
    }

    return $references;
}


// Return an array of fields where scald drag 'n drop is enabled
function ma_scald_get_dnd_enabled_scald_fields() {
    $enabled_fields = array();
    $fields = field_info_instances();

    foreach($fields as $entity_type_name => $entity_type) {
        foreach($entity_type as $bundle_name => $bundle) {
            foreach($bundle as $field_name => $field) {
                if(isset($field['settings']['dnd_enabled']) && $field['settings']['dnd_enabled'] == 1) {
                    $enabled_fields[$entity_type_name][$bundle_name][] = $field['field_name'];
                }
            }
        }
    }

    return $enabled_fields;
}

/**
 * Render the atom Download link
 */
function ma_scald_atom_download_link($field) {
  $entity = $field['entity'];

  // For some baffling reason, this link is getting rendered for uploaded videos on the search page, despite admin/structure/scald/video/display/ma_scald_search_results clearly not having the download field, so just skip out of it here
  if ($field['view_mode'] <> 'ma_colorbox') {
    return;
  }

  // Do not render the download link for the 3rd party embedded videos
  if ($field['bundle'] == 'video' AND $entity->provider <> 'scald_video') {
    return;
  }

  // 'Download' was determined to be unpalatable, switching to 'Access'
  $download_link_text = 'Access' . ((empty($entity->type)) ? '' : ' ' . $entity->type);
  return l($download_link_text, file_create_url ($entity->file_source));
}

/**
 * Implements hook_form_ID_alter().
 */

function ma_scald_form_scald_atom_add_form_add_alter(&$form, &$form_state) {

  // Since these are hardcoded into the audio and video forms, hook here to change file system paths to private when uploading such
  if ($upload_location = $form['file']['#upload_location']) {
    $form['file']['#upload_location'] = str_replace('public', 'private', $upload_location);
  }

  // Hide these fields on the initial image atom add form
  // These only show for images for some (scald) reason
  // On the edit form that follows, the fields show along with the other metadata fields, for all atom types
  $form['scald_authors']['#access'] = FALSE;
  $form['scald_tags']['#access'] = FALSE;

  // Add m4a to allowed list of extensions for audio atoms
  $type = $form_state['scald']['type']->type;
  if ($type == 'audio') {
    $form['file']['#upload_validators']['file_validate_extensions'] = array('wav ogg mp3 m4a');
  }
}

/**
 * Implements hook_field_group_pre_render().
 */
function ma_scald_field_group_pre_render (&$element, $group, &$form) {

  // Rewrite the scald metadata fieldgroup as a popup, leveraging the popup module's API
  if ($group->group_name == 'group_scald_atom_metadata') {

    // Order the fields according to their weight
    $ordered_fields = array();
    foreach ($element as $field_name => $field) {
      $ordered_fields[$field['#weight']] = $field_name;
    }
    ksort ($ordered_fields);

    // Render each field, adding it to the output
    $output = "";
    foreach ($ordered_fields as $ordered_field) {
      $output .= render($element[$ordered_field]);
    }

    // Render the popup, rewriting the fieldgroup's output
    require_once drupal_get_path('module', 'popup') . '/includes/popup.api.inc';
    $popup_attributes = array ( // See the popup module's readme for more options
      'width' => 420,
      #'effect' => 'slide-down', // not sure if I like this
      'empty-body' => 'none',
    );
    $link_text = '<div class="field-label">' . ucfirst ($group->bundle) . " Metadata" . '</div>';
    $element['#markup'] = popup_element($link_text, $output, $popup_attributes);
  }
}

/**
 * Implements hook_form_alter().
 */
function ma_scald_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'scald_atom_add_form_options') {
    $atom_index = 0;
    
    // Add a custom validation handler so that the user cannot unset a CP if they are not allowed to post to it
    $form['#validate'][] = 'ma_scald_prevent_unsetting_cp_when_no_permission';
    $cp_options = ma_cultural_protocol_get_cps_user_can_post_to ();

    while (isset($form['atom' . $atom_index])) {

      // Restrict CP nodes the scald item can be placed into according to the user's CP perms (otherwise by default it will show all CPs), but do also show CP nodes that are already set regardless of permission
      $default_values = $form['atom' . $atom_index]['field_scald_protocol'][LANGUAGE_NONE]['#default_value'];
      $initial_options = $form['atom' . $atom_index]['field_scald_protocol'][LANGUAGE_NONE]['#options'];
      foreach ($initial_options as $gid => $cp_title) {
        if (!array_key_exists ($gid, $cp_options) && !in_array($gid, $default_values)) {
          unset ($form['atom' . $atom_index]['field_scald_protocol'][LANGUAGE_NONE]['#options'][$gid]);
        }
      }

      // Provide a description that's NOT a popup for the protocol field
      $form['atom' . $atom_index]['field_scald_protocol']['#suffix'] = '<div class = "atom-protocol-desc">' . t("Atoms are open by default. The Protocol field lets you restrict who sees the atom, and who can re-use the atom in their own Digital Heritage items. This permission is independent of the Digital Heritage's Cultural Protocol. In general it is best to leave this open. If you select multiple Protocols, users with access to ANY of the Protocols will be able to see this item.") . '</div>';
      // Hide the old protocol field
      $form['atom' . $atom_index]['og_group_ref']['#access'] = FALSE;

      // Do not show the per-scald actions checkboxes (view, edit, fetch, delete). This is TMI in the form. Default values come from per scald type in the atom config.
      $form['atom' . $atom_index]['scald_actions']['#access'] = false;

      // Set metadata
      $entity = $form['atom' . $atom_index]['#entity'];

      // $entity is empty on our custom scald_sketchfab provider (for reasons unknown), so do not
      // alter any fields as we need $entity hereforth. This is fine as sketchfab and any other custom
      // scald providers can have any custom metadata handling done within the provider code.
      if (!$entity) {
        return;
      }

      if(isset($entity->base_id)) {
	$file = file_load($entity->base_id);
      }
      
      $language = $entity->language;

      if (!isset($entity->created)) {

        // Set scald title according to filename, if the title isn't aleady set by the provider (eg. Youtube)
        if (!isset($entity->title)) {
          $filename = $file->filename;
          $form['atom' . $atom_index]['title']['#default_value'] = $file->filename;
        }

        // For images, pre-populate the metadata from exif data (
        if ($entity->type == 'image') {

          // exif field => scald field
          $field_assocs = array(
            'field_media_description' => 'field_scald_description',
            //        'field_aperturevalue' => '',
            'field_iptc_headline' => 'field_scald_headline',
            'field_iptc_copyright' => 'field_licence_std_cc',
            'field_xmp_rights' => 'field_rights',
            'field_iptc_sublocation' => 'field_scald_location',
            'field_xmp_creator' => 'field_scald_creator',
            'field_iptc_keywords' => 'field_scald_keywords',
            //'field_exif_datetime' => 'field_scald_created',
            //'field_gps_latitude' => '',
            //'field_gps_longitude' => '',
          );
	  
          foreach ($field_assocs as $exif_field => $scald_field) {
            if (isset($file->{$exif_field}[$language][0]['value']) && $form['atom' . $atom_index][$scald_field][$language][0]['value']['#default_value'] == NULL) {
              $form['atom' . $atom_index][$scald_field][$language][0]['value']['#default_value'] = $file->{$exif_field}[$language][0]['value'];
            }
          }

          if (isset($file->field_exif_datetime[$language][0]['value'])) {
            $form['atom' . $atom_index]['field_scald_created'][$language][0]['#default_value']['value'] = $file->field_exif_datetime[$language][0]['value'];
            $form['atom' . $atom_index]['field_scald_created'][$language][0]['#default_value']['value2'] = $file->field_exif_datetime[$language][0]['value'];
          }

          // do geolocation fields
          if (isset($file->field_gps_latitude[$language][0]['value']) && $form['atom' . $atom_index]['field_scald_geo_location'][$language][0]['geom']['#default_value']['lat'] == '') {
            $form['atom' . $atom_index]['field_scald_geo_location'][$language][0]['geom']['#default_value']['lat'] = $file->field_gps_latitude[$language][0]['value'];
          }
          if (isset($file->field_gps_longitude[$language][0]['value']) && $form['atom' . $atom_index]['field_scald_geo_location'][$language][0]['geom']['#default_value']['lon'] == '') {
            $form['atom' . $atom_index]['field_scald_geo_location'][$language][0]['geom']['#default_value']['lon'] = $file->field_gps_longitude[$language][0]['value'];
          }

          if ($form['atom' . $atom_index]['field_scald_identifier'][$language][0]['value']['#default_value'] == NULL) {
            $form['atom' . $atom_index]['field_scald_identifier'][$language][0]['value']['#default_value'] = $filename;
          }

          // If we have metadata to put into that atom title, do it, otherwise it is already populated with the filename or pre-set title
          if (isset($file->field_media_title[$language][0]['value'])) {
            $form['atom' . $atom_index]['title']['#default_value'] = $file->field_media_title[$language][0]['value'];
          }

          if (isset($file->field_iptc_keywords[$language][0]['value'])) {
            $keywords = $file->field_iptc_keywords[$language][0]['value'];
            if (sizeof($keywords)) {
              $form['atom' . $atom_index]['scald_tags'][$language]['#default_value'] = $keywords;
            }
          }
        }
      }
      $atom_index++;
    }
  }

}

// Validation handler for scald atoms to prevent unsetting a CP if user is not a Contributor or Protocol Steward of that CP
function ma_scald_prevent_unsetting_cp_when_no_permission(&$form, &$form_state) {
  $cp_options = ma_cultural_protocol_get_cps_user_can_post_to ();
  $atom_index = 0;
  while (isset($form['atom' . $atom_index])) {
    $default_values = $form['atom' . $atom_index]['field_scald_protocol'][LANGUAGE_NONE]['#default_value'];
    foreach ($default_values as $gid) {
      if (!in_array ($gid, $form['atom' . $atom_index]['field_scald_protocol'][LANGUAGE_NONE]['#value'])) {
        if (!array_key_exists ($gid, $cp_options)) {
          $cp = node_load ($gid);
          form_set_error ('field_scald_protocol', 'You cannot unset <i>' . $cp->title . '</i> as a Cultural Protocol because you are not one its Contributors or Protocol Stewards.');
        }
      }
    }
    $atom_index++;
  }
}

/**
 * Implements hook_views_default_views_alter
 */
function ma_scald_views_default_views_alter(&$views)
{
    if(isset($views['scald_atoms'])) {
        $views['scald_atoms']->display['default']->display_options['access']['type'] = 'php';
        $views['scald_atoms']->display['default']->display_options['access']['php_access'] = '$admin = user_role_load_by_name(\'administrator\');
$mukurtuadmin = user_role_load_by_name(\'Mukurtu Administrator\');

if(user_has_role($admin->rid) || user_has_role($mukurtuadmin->rid)) {
     return TRUE;
}
return FALSE;';
    }
}

/**
 * Implements hook_views_query_alter
 */
function ma_scald_views_query_alter(&$view, &$query) {
    if($view->name == 'scald_library') {
        // Filter out Scald atoms that are blocked by protocol in the DND scald view
        // Note that this isn't actually enforcing protocols, we are just trying to avoid the scald
        // access denied message in the dnd toolbar.

        // Get the groups the user has view rights to
        $groups = og_get_groups_by_user(NULL, 'node');

        // Join, to bring in the scald protocol field
        $join = new views_join;
        $join->construct('field_data_field_scald_protocol', 'scald_atoms', 'sid', 'entity_id');
        $query->add_relationship('field_data_field_scald_protocol', $join, 'scald_atoms');

        // Initial condition for all scald atoms without a protocol (effectively open to all)
        $query->where[] =
                array('conditions' =>
                      array(array(
                          'field' => 'field_data_field_scald_protocol.field_scald_protocol_target_id',
                          'value' => NULL,
                          'operator' => 'IS NULL'
                      )),
                      'args' => array(),
                      'type' => 'OR'
                );

        $query_results = array_keys($query->where);
        $conditions_key = end($query_results);

        // Add an 'or' condition for each protocol the user can view
        foreach($groups as $group) {
            $query->where[$conditions_key]['conditions'][] = array(
                          'field' => 'field_data_field_scald_protocol.field_scald_protocol_target_id',
                          'value' => $group,
                          'operator' => '='
            );
        }
    }
}

/**
 * Implements hook_scald_player().
 */
function ma_scald_scald_player() {
    return array('mukurtu_default' => array(
        'name' => 'Mukurtu default player',
        'description' => 'Mukurtu default player',
        'type' => array('*'),
    ));
}

/**
 * Implements hook_scald_prerender().
 */
function ma_scald_scald_prerender($atom, $context, $options, $mode) {
    $default_thumbnail_contexts = array('ma_scald_search_results', 'mukurtu_scald_related_items');

    if($atom->type == 'audio' && !in_array($context, $default_thumbnail_contexts)) {
        // Soundcloud already integrates the thumbnail with the display, remove it for rendering so it isn't duplicated
        if($atom->provider == 'scald_soundcloud') {
            if(!empty($atom->scald_thumbnail)) {
                unset($atom->scald_thumbnail);
            }
        }

        // Non-soundcloud audio atoms go to the HTML5 provider
        if($atom->provider != 'scald_soundcloud') {
            scald_audio_scald_prerender($atom, $context, $options, $mode);
            return;
        }
    }

    // All Soundcloud rendering should be handled by the Soundcloud module
    if($atom->provider == 'scald_soundcloud') {
        scald_soundcloud_scald_prerender($atom, $context, $options, $mode);
    }

    // For Sketchfab atoms, this hook is not fired as scald_sketchfab_scald_prerender catches it first, which we want.
    // If for some reason this hook starts firing on Sketchfab atoms, do something similar to what we do for Soundcloud atoms above.

    if($mode == 'player') {
        if($atom->type <> 'image' && in_array($context, $default_thumbnail_contexts)) {
            // Use the atom thumbnail if there is one
            if (isset($atom->scald_thumbnail[LANGUAGE_NONE][0]['uri'])) {
                if($atom->type == 'file' || $atom->type == 'video') {
                    $atom->rendered->player = array('#markup' => '');
                    return;
                }
                $image_styles = array (
                    'ma_scald_search_results' => 'medium',
                    'mukurtu_scald_related_items' => 'related_items_teaser'
                );
                $thumbnail_image = theme_image_style (array (
                    'style_name' => $image_styles[$context],
                    'path' => $atom->scald_thumbnail[LANGUAGE_NONE][0]['uri'],
                ));
            }
            // If no atom thumbnail, use our default thumbnails
            else {
                $image_widths = array (
                    'ma_scald_search_results' => '220',
                    'mukurtu_scald_related_items' => '280'
                );
                $thumbnail_image = '<img src = "/' . drupal_get_path('module', 'ma_digitalheritage') . '/images/default_' . $atom->type . '_thumbnail_' . $image_widths[$context] . '.jpg">';
            }

            $atom->rendered->player = array('#markup' => l($thumbnail_image, $options['link'], array('html' => TRUE)));
        }
    }
}

function ma_scald_get_first_image_atom_content($atom_content_field) {
    if(!isset($atom_content_field['#items']) || empty($atom_content_field['#items'])) {
        return $atom_content_field;
    }

    $first = TRUE;
    foreach($atom_content_field['#items'] as $index => $atom_ref) {
        if(!$first) {
            unset($atom_content_field['#items'][$index]);
            unset($atom_content_field[$index]);
        } else {
            $first = FALSE;
        }
    }
    return $atom_content_field;
}
