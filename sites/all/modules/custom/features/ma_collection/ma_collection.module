<?php
/**
 * @file
 * Code for the Collection feature.
 */

include_once('ma_collection.features.inc');

/**
 * Implements hook_user_logout().
 */
// Delete the cookie that holds the Collections browse mode setting
function ma_collection_user_logout ($account) {
  setcookie('collections_browse_mode', '', 1, '/');
}

/**
 * Implements template_preprocess_views_view.
 */
function ma_collection_preprocess_views_view(&$vars) {
  $view = &$vars['view'];

  // Add JS for browse mode switcher on Collections view
  if ($view->name == 'collections_grid_list') {
    drupal_add_library('system', 'jquery.cookie');
    drupal_add_js(drupal_get_path('module', 'ma_collection') . '/js/collection_browse_mode_switcher.js');
  }

}

function ma_collection_node_view($node, $view_mode, $langcode) {
  drupal_add_js(drupal_get_path('module', 'ma_collection') . '/js/mukurtu_collection.js');

  // On full node view of node types that can be added to a Collection, load the "Add to Collection" ctools modal JS.
  if ($view_mode == 'full') {
    if (in_array($node->type, ma_collection_get_valid_node_types_for_collection())) {
      ma_collection_include_add_to_collection_modal_js();
    }
  }

  if ($node->type == 'collection' || $node->type == 'personal_collection') {

      // If there is no collection image, try to find an appropriate one
      if(empty($node->field_collection_image)) {
          $sid = ma_collection_get_default_atom($node);

          if($sid) {
              unset($node->content);
              $node->field_collection_image[LANGUAGE_NONE][0]['sid'] = $sid;
              node_build_content($node, $view_mode, $langcode);
          }
      }

    if ($view_mode == 'search_result') {

      // Tooltip and links on DH grid/list views
      if (isset($node->content['field_collection_image'])) {
        foreach ($node->content['field_collection_image'] as $atom_index => $atom) {
          if (!is_numeric($atom_index)) {
            continue;
          }

          // Using CSS for the tooltip (see comments in ma_digitalheritage_node_view for explanation)
          // Also add link here to parent node
          $new_markup = '<a class = "tooltips" href=" ' . url("node/" . $node->nid) . '">' . $atom['#markup'] . '</a>';

          $node->content['field_collection_image'][$atom_index]['#markup'] = $new_markup;

        }
      }

    }

  }

  // Personal Collection
  if ($node->type == 'personal_collection') {

    // Hide the Privacy field unless you are the author of the Personal Collection (or have edit access to it)
    // We do not want to show "Public" when a user is viewing another user's Personal Collection, because that is assumed, thus redundant.
    if (!node_access('update', $node)) {
      $node->content['field_personal_coll_privacy']['#access'] = FALSE;
    }

  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ma_collection_form_views_exposed_form_alter(&$form, &$form_state) {

  // Add a button to reset search and filters
  // Search API provides a button on the view that will reset the search, but not the filters. Leaving that off and creating our own that will reset both.
  if (strpos($form['#id'], 'views-exposed-form-collections-grid-list-all') !== FALSE) {
    if (count(arg()) > 1 OR count(drupal_get_query_parameters())) {
      $form['reset'] = array('#markup' => l(t('Reset'),'collections', array('attributes' => array('class' => array ('btn', 'btn-primary', 'form-submit')), 'html' => TRUE)));
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function ma_collection_node_presave($node) {
  // Set the Collection Item Count.
  // Cases when we need to update the count:
  // - New Collection created -> This hook triggers.
  // - Collection edited -> This hook triggers.
  // - Contained item deleted/edited and removed from collection -> CER updates collection relation field, this hook triggers.
  // - Contained item published/unpublished -> ma_collection_node_postupdate saves the collection, which triggers this hook.
  if ($node->type == 'collection' or $node->type == 'personal_collection') {
    $collection_emw = entity_metadata_wrapper('node', $node);
    $contained_item_count = ma_collection_get_published_node_count($collection_emw->field_digital_heritage_items->value());
    $collection_emw->field_digital_heritage_count->set($contained_item_count);
  }
}

/**
 * Implements hook_node_insert().
 */
function ma_collection_node_insert($node) {
}

/**
 * Implements hook_field_attach_delete().
 */
function ma_collection_field_attach_delete ($entity_type, $entity) {
}

/**
 * Implements hook_node_update().
 */
function ma_collection_node_update($node) {
}

/**
 * Implements hook_node_postupdate().
 */
function ma_collection_node_postupdate($node) {
  // Update collection count in the case where a node contained
  // in a collection has a status change.
  // Is this a node type currently supported by collections?
  if (in_array($node->type, ma_collection_get_valid_node_types_for_collection())) {
    // Did it have a status change?
    // All other recount cases handled by ma_collection_node_presave.
    // Check all Related Content values for collections we should trigger updates for.
    foreach ($node->field_digital_heritage_items[LANGUAGE_NONE] as $collection_ref) {
      // Load and save the collection node. We don't need to change the count here.
      // We only need to trigger ma_collection_node_presave, which will do the recount.
      $collection = node_load($collection_ref['target_id']);
      $collection_emw = entity_metadata_wrapper('node', $collection);
      $contained_item_count = ma_collection_get_published_node_count($collection_emw->field_digital_heritage_items->value());
      $old_item_count = (int) $collection_emw->field_digital_heritage_items->value();
      // Only save if the counts are different.
      if ($old_item_count != $contained_item_count) {
        node_save($collection);
      }
    }
  }
}


// Count number of published nodes from a EMW ref value list.
function ma_collection_get_published_node_count($node_list) {
  $count = 0;
  $seen = array();
  if ($node_list) {
    foreach ($node_list as $node) {
      if (isset($node->status) && $node->status == NODE_PUBLISHED && !in_array($node->nid, $seen)) {
        $count++;

        // Don't count duplicates.
        $seen[] = $node->nid;
      }
    }
  }
  return $count;
}

/**
 * Implements hook_node_access().
 */
function ma_collection_node_access($node, $op, $account) {

  $type = is_string($node) ? $node : $node->type;

  // Prevent deleting collections with sub-collections.
  // Note, this permission check is bypassed for admin user 1, so we also hide the delete button manually in the node form (if has subcollections).
  if ($type == 'collection') {
    if ($op == 'delete') {
      if (ma_collection_check_for_subcollections($node)) {
        return NODE_ACCESS_DENY;
      }
    }
  }

}

/**
 * Implementation of hook_form_alter().
 *
 * Collection and Personal Collection node form alter.
 */
function ma_collection_form_alter(&$form, $form_state, $form_id) {

  // Don't show the personal collections field.
  if (isset($form['field_personal_collections'])) {
    $form['field_personal_collections']['#access'] = FALSE;
  }

  if ($form_id == 'collection_node_form' OR $form_id == 'personal_collection_node_form') {
    $node = $form['#node'];

    // Collection node form
    if ($form_id == 'collection_node_form') {

      // "Item Sharing Settings" field customizations versus how it works by default (as used in the DH node form) //

      // Not required for Dictionary Words
      $form['field_item_privacy_setting'][LANGUAGE_NONE]['#required'] = FALSE;

      // The field has a default value. This is just to catch cases on demo sites where words were set already before this field was added
      if (!$form['field_item_privacy_setting'][LANGUAGE_NONE]['#default_value']) {
        $form['field_item_privacy_setting'][LANGUAGE_NONE]['#default_value'] = 'all';
      }

      // Hide the field unless a Community is selected in the first value
      $form['field_item_privacy_setting']['#states'] = array(
        'invisible' => array(
          ':input[id="edit-oggroup-fieldset-0-dropdown-first"]' => array('value' => 0),
        ),
      );


      // Collections Tree in the collection node form

      // Top-level Collection field should generally be hidden, as we only want to set sub-collections in top-level collection, and restrict the other way around.
      $form['field_collections_parent_coll']['#access'] = FALSE;
      // If this is a sub-collection, then...
      if (isset($node->field_collections_parent_coll[LANGUAGE_NONE][0])) {
        // ...show the top-level collection field, but do not allow editing.
        $form['field_collections_parent_coll']['#access'] = TRUE;
        $form['field_collections_parent_coll']['#disabled'] = TRUE;
        // ...hide the sub-collections field.
        $form['field_collections_child_coll']['#access'] = FALSE;
      }

      // Hide the delete button if the collection has sub-collections.
      // This is for the benefit of admin user 1, as the check is also done in ma_collection_node_access,
      // which will, in addition to actually preventing deletion, will hide the button, but admin 1 bypasses this check.
      $form['actions']['delete']['#access'] = !ma_collection_check_for_subcollections($node);
    }

    // Creating a new Collection or Personal Collection
    if (!isset($node->nid)) {

      // Prepopulate any "Add To Collection" / "Add to Personal Collection" nodes in the entity refs.
      $query = drupal_get_query_parameters();
      if (isset($query['add'])) {
        $add = explode('-', $query['add']);
        if (is_numeric($add[1])) {
          $node_to_add = node_load($add[1]);
          $form['field_digital_heritage_items'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $node_to_add->title . ' (' . $node_to_add->nid . ')';
        }
      }

    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * When deleting a Collection, let the user know on the confirmation message that the DH items will remain.
 */
function ma_collection_form_node_delete_confirm_alter(&$form, $form_state) {
  $node = $form['#node'];
  if ($node->type == 'collection') {
    $form['description']['#markup'] = "<p>This action cannot be undone.</p>This will delete the Collection but not the items within the Collection.</p>";
  }
  elseif ($node->type == 'personal_collection') {
    $form['description']['#markup'] = "<p>This action cannot be undone.</p>This will delete the Personal Collection but not the items within the Collection.</p>";
  }
}

// Helper function to rewrite the Collection and Precollection node title to show the item count in parenthesis, plus the Collection Tree if applicable.
function ma_collection_collections_title_with_count_and_tree_popup ($entity) {

  // Get the item count
  $item_count = 0;
  $coll_wrapper = entity_metadata_wrapper('node', $entity);
  $items = $coll_wrapper->field_digital_heritage_items->value();
  if (count($items)) {
    if (user_access('bypass content access control')) {
      $item_count = count($items);
    }
    else {
      foreach ($items as $item) {
        if (node_access('view', $item)) {
          $item_count++;
        }
      }
    }
  }

  $title = $entity->title . ' (' . $item_count . ')';
  $path = 'node/' . $entity->nid;

  // Get the collection tree.
  if ($tree = ma_collection_collections_tree($entity)) {
    module_load_include('inc', 'popup', 'includes/popup.api');
    $attributes = [
      'link' => $path,
      'style' => 'Bent white',
      'origin' => 'top-right',
      'expand' => 'top-right',
      // 'activate' => 'click', 'close' => 1, // uncomment this to tweak CSS in the inspector
      'class' => 'collections-tree-popup',
    ];
    $output =  popup_element($title, $tree, $attributes);
  }
  // Standalone collections have no tree.
  else {
    $output = l($title, $path, ['html' => TRUE]);
  }
  return $output;
}

/**
 * Get the item count of a collection including subcollections.
 *
 * Checks status and access.
 * Called in Display Suite code field.
 */
function ma_collection_get_item_count($entity) {
  $item_count = 0;
  if (!empty($entity->field_collections_child_coll[LANGUAGE_NONE])) {
    foreach ($entity->field_collections_child_coll[LANGUAGE_NONE] as $sctarget) {
      $subcollection = node_load($sctarget['target_id']);
      $item_count += ma_collection_get_item_count($subcollection);
    }
  }

  $coll_wrapper = entity_metadata_wrapper('node', $entity);
  $items = $coll_wrapper->field_digital_heritage_items->value();
  if (!empty($items)) {
    if ($item->status && user_access('bypass content access control')) {
      $item_count += count($items);
    }
    else {
      foreach ($items as $item) {
        if ($item->status && node_access('view', $item)) {
          $item_count++;
        }
      }
    }
  }
  return $item_count;
}

/**
 * Implements hook_menu().
 */
function ma_collection_menu() {
  $items = array();

  // "Add to Collection" & "Add to Personal Collection" ajax.
  $items['ma_collection/%ctools_js'] = array(
    'page callback' => 'ma_collection_add_to_collection_callback',
    'page arguments' => array(1, 2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Add "Add to Collection" node view nav tab.
  $items['node/%node/add-to-collection'] = array(
    'title' => 'Add to Collection',
    'access callback' => 'ma_collection_add_node_to_collection_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  // Add "Add to Personal Collection" node view nav tab.
  $items['node/%node/add-to-personal-collection'] = array(
    'title' => 'Add to Personal Collection',
    'access callback' => 'ma_collection_add_node_to_personal_collection_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  return $items;
}

/**
 * Add to Collection ajax callback.
 */
function ma_collection_add_to_collection_callback($ajax, $nid_to_add, $collection_type) {

  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'nid_to_add' => $nid_to_add,
    );
    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('ma_collection_add_to_' . $collection_type . '_form', $form_state);
    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return "Please enable Javascript in your browser.";
  }
}

/**
 * Rewrite the link path for the "Add to Collection" node view nav tab to the Ctools modal.
 *
 * The original path needs to be written as "node/{nid}/{path}" in order for the tab to show up in the node view.
 */
function ma_collection_url_outbound_alter(&$path, &$options, $original_path) {
  if (substr($path,-18) == '/add-to-collection') {
    $path_parts = explode('/', $path);
    if (is_numeric($path_parts[1])) {
      $path = 'ma_collection/nojs/' . $path_parts[1] . '/collection';
      $options['attributes'] = array('class' => 'ctools-use-modal ctools-modal-add-to-collection');
    }
  }
  elseif (substr($path,-27) == '/add-to-personal-collection') {
    $path_parts = explode('/', $path);
    if (is_numeric($path_parts[1])) {
      $path = 'ma_collection/nojs/' . $path_parts[1] . '/personal_collection';
      $options['attributes'] = array('class' => 'ctools-use-modal ctools-modal-add-to-collection');
    }
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 *
 * Add "Add to Collection" and "Add to Personal Collection" contextual links to the search results nodes.
 */
function ma_collection_contextual_links_view_alter(&$element, $items) {

  if (!empty($element['#element']['#entity_type']) && !empty($element['#element']['#bundle'])) {
    if (in_array($element['#element']['#bundle'], ma_collection_get_valid_node_types_for_collection())) {
      $view_mode = isset($element['#element']['#view_mode']) ? $element['#element']['#view_mode'] : 'default';
      if ($view_mode == 'search_result') {
        if (user_access('edit own collection content')) {
          // Conditions met. Add the link.
          ma_collection_include_add_to_collection_modal_js();
          $nid = $element['#element']['#node']->nid;
          $element['#links']['add_to_collection'] = array(
            'title' => t('Add to Collection'),
            'href' => 'ma_collection/nojs/' . $nid . '/collection',
            'attributes' => array('class' => 'ctools-use-modal ctools-modal-add-to-collection'),
          );
        }
        if (user_access('edit own personal_collection content')) {
          // Conditions met. Add the link.
          ma_collection_include_add_to_collection_modal_js();
          $nid = $element['#element']['#node']->nid;
          $element['#links']['add_to_personal_collection'] = array(
            'title' => t('Add to Personal Collection'),
            'href' => 'ma_collection/nojs/' . $nid . '/personal_collection',
            'attributes' => array('class' => 'ctools-use-modal ctools-modal-add-to-collection'),
          );
        }
      }
    }
  }
}

/**
 * "Add to Collection" and "Add to Personal Collection" forms.
 */
function ma_collection_add_to_collection_form($form, $form_state, $type = 'collection') {

  $nid_to_add = $form_state['nid_to_add'];

  // Build an array of collections.

  // First option is to create a new collection.
  $type_name = [
    'collection' => 'Collection',
    'personal_collection' => 'Personal Collection',
  ];
  $colls = [
    'create_new_collection' => 'Create a new ' . $type_name[$type]
  ];

  // First get collections that already have this node in it, so we can exclude them later.
  $colls_to_exclude = array();
  $valid_collection_types = ma_collection_get_valid_node_types_for_collection();
  foreach ($valid_collection_types as $node_type) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $type)
      ->fieldCondition('field_digital_heritage_items', 'target_id', $nid_to_add);
    $result = $query->execute();
    if (isset($result['node'])) {
      $colls_to_exclude = array_keys($result['node']);
    }
  }

  // Get the collections.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $type)
    ->propertyCondition('status', NODE_PUBLISHED);
  $result = $query->execute();
  if (isset($result['node'])) {
    $coll_nids = array_keys($result['node']);
    foreach ($coll_nids as $coll_nid) {
      if (in_array($coll_nid, $colls_to_exclude)) {
        continue;
      }
      $coll_node = node_load($coll_nid);
      if (node_access('update', $coll_node)) { // exclude nodes user does not have permission to edit.
        $colls[$coll_nid] = $coll_node->title;
      }
      // Edit the options values to show collection ancestors.
      $colls = ma_collection_add_ancestors_to_collections_titles($colls);
    }
  }


  // Build the form.
  $form['collection'] = [
    '#title' => t('Add Item to ' . $type_name[$type]),
    '#type' => 'select',
    '#options' => $colls,
    '#select2' => [],
  ];
  $form['actions'] = [
    'submit' => [
      '#type' => 'submit',
      '#value' => t('Add'),
    ],
    'cancel' => [
      '#type' => 'submit',
      '#value' => t('Cancel'),
    ],
  ];

  return $form;
}


/**
 * "Add to Personal Collection" form.
 */
function ma_collection_add_to_personal_collection_form($form, $form_state) {
  return ma_collection_add_to_collection_form ($form, $form_state, 'personal_collection');
}

/**
 * Add to Collection / Personal Collection form submit handler.
 */
function ma_collection_add_to_collection_form_submit(&$form, &$form_state, $personal = 0) {

  // Tell the browser to close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();

  // Skip if user pressed Cancel.
  if ($form_state['values']['op'] == "Cancel") {
    return;
  }

  $coll_nid = $form_state['values']['collection'];
  if ($coll_nid) {

    $nid_to_add = $form_state['nid_to_add'];
    $node_to_add = node_load ($nid_to_add);

    if (in_array($node_to_add->type, ma_collection_get_valid_node_types_for_collection())) {

      // Create a new Collection
      if ($coll_nid == 'create_new_collection') {
        ctools_include('ajax');
        ctools_add_js('ajax-responder');
        $query = [];
        $query['add'] = $node_to_add->type . '-' . $nid_to_add;
        $referer = parse_url($_SERVER['HTTP_REFERER']); // Using referring page because current path is ajax callback.
        if (isset($referer['path'])) {
          $query['destination'] = substr($referer['path'], 1);
        }
        $node_type_to_create = 'collection';
        if ($personal) {
          $node_type_to_create = 'personal-collection';
        }
        $commands[] = ctools_ajax_command_redirect('node/add/' . $node_type_to_create, 0, ['query' => $query]);
        print ajax_render($commands);
        exit;
      }

      // Add to existing Collection
      $coll_node = node_load($coll_nid);
      if (node_access('update', $coll_node)) {

        // Add the item to the Collection node.
        $cw = entity_metadata_wrapper('node', $coll_node);
        $cw->field_digital_heritage_items[] = $nid_to_add;
        $cw->save(); // comment this line while debugging.

        // Display confirmation message.
        // EntityDrupalWrapper::save throws an exception if it fails, so if we get here, we know it worked.
        if ($personal) {
          $output = '<p><i>' . $node_to_add->title . '</i> has been added to Personal Collection <i>' . $coll_node->title . '</i>.</p>';
          $output .= '<div><button type="submit" class="btn btn-success ctools-close-modal">OK</button></div>';
          $ctools_output[] = ajax_command_invoke("#star-{$nid_to_add}", 'mukurtuToggleStarOn');
          $ctools_output[] = ctools_modal_command_display('Success', $output);
          print ajax_render($ctools_output);
          exit;
        }
        else {
          // For nodes added to a Collection, we reload the whole node because the Collections field will have a new entry in it and we want the node view to reflect that.
          drupal_set_message('<i>' . $node_to_add->title . '</i> has been added to Collection <i>' . $coll_node->title . '</i>.');
          $commands[] = ctools_ajax_command_redirect('/node/' . $nid_to_add);
          print ajax_render($commands);
          exit;
        }

      }
    }
  }
}

/**
 * Add to Personal Collection form submit handler.
 */
function ma_collection_add_to_personal_collection_form_submit(&$form, &$form_state) {
  ma_collection_add_to_collection_form_submit($form, $form_state, $personal = 1);
}

/**
 * Helper function to add the JS for an "Add To Collection" ctools modal.
 *
 * This uses AJAX and ctools to put a form into a modal.
 */
function ma_collection_include_add_to_collection_modal_js() {

  if (user_is_logged_in()) {
    ctools_include('modal'); // This is included statically by Ctools so no performance risk of multiple loading.
    drupal_add_js([
      'add-to-collection' => [
        'modalClass' => 'add-to-collection',
        'modalSize' => [
          'type' => 'scale',
          'width' => .8,
          'height' => .8,
          'contentRight' => 0,
          'contentBottom' => 0,
        ],
      ],
    ], 'setting');
    ctools_modal_add_js(); // This is added statically by Ctools so no performance risk of multiple loading.
  }
}

/**
 * Access callback for the "Add to Collection" node view tab.
 */
function ma_collection_add_node_to_collection_access($node) {
  if (user_access('edit own collection content')) {
    if (in_array($node->type, ma_collection_get_valid_node_types_for_collection())) {
      return TRUE;
    }
  }
}

/**
 * Access callback for the "Add to Collection" node view tab.
 */
function ma_collection_add_node_to_personal_collection_access($node) {
  if (user_is_logged_in()) {
    if (in_array($node->type, ma_collection_get_valid_node_types_for_collection())) {
      return TRUE;
    }
  }
}

/**
 * Helper function to return types of content that can be added to a collection.
 */
function ma_collection_get_valid_node_types_for_collection() {
  $collection_field_info = field_info_field('field_digital_heritage_items');
  return $collection_field_info["settings"]["handler_settings"]["target_bundles"];
}

/**
 * Implements hook_views_pre_view().
 */
function ma_collection_views_pre_view(&$view, &$display_id, &$args) {

  // In the subcollections field of a collection, when editing the collection,
  // allow subcollections where the parent is the current collection.
  // The filter is already set in the view as part of a filter group (which is why it can't be a contextual filter).
  // Here we are simply replacing the filter value with the $arg[0] which is the current collection NID, when editing.
  if ($view->name == 'child_collections_entity_reference') {
    $filters = $view->display_handler->get_option('filters');
    if (is_numeric(arg(1))) {
      $filters['field_collections_parent_coll_target_id']['value']['value']=arg(1);
      $view->display_handler->override_option('filters', $filters);
    }
  }

  if ($view->name == 'personal_collections') {

    // Hide the "Add a Personal Collection" footer unless user is on own profile page.
    global $user;
    if (arg(1) <> $user->uid) {
      $item = array(
        'id' => 'area',
        'table' => 'views',
        'field' => 'area',
        'content' => '',
      );
      $view->set_item($display_id, 'footer', 'area', $item);
    }
  }

}

/**
 * Render a collection tree, and the current node's place within that tree.
 */
function ma_collection_collections_tree($current) {

  if (isset($current->field_collections_child_coll[LANGUAGE_NONE])) {
    $parent = $current;
  }
  elseif (isset($current->field_collections_parent_coll[LANGUAGE_NONE])) {
    $parent = node_load($current->field_collections_parent_coll[LANGUAGE_NONE][0]['target_id']);
  }

  if (isset($parent)) {
    $children = $parent->field_collections_child_coll[LANGUAGE_NONE];

    foreach ($children as $child_i => &$child) {
      $child['id'] = $child_i + 1;
      if (isset($child['parent_delta'])) {
        $child['parent_delta']++;
      }
      $child_node = node_load($child['target_id']);
      if ($current->nid == $child_node->nid) {
        $child['data'] = '<span class="current";>' . $current->title . '</span>';
      }
      else {
        $child['data'] = l($child_node->title, 'node/' . $child_node->nid);
      }
    }
    // Build a recursive array out of the flat array.
    $children_tree = buildTree($children);

    // Put the parent at the top, with the children below.
    if ($current->nid == $parent->nid) {
      $parent_data = '<span class="current";>' . $parent->title . '</span>';
    }
    else {
      $parent_data = l($parent->title, 'node/' . $parent->nid);
    }
    $items = [[
      'data' =>  $parent_data,
      'children' => $children_tree,
      'class' => ['parent']
    ]];

    // theme_item_list correctly nests recursive arrays.
    // The CSS to make the nested list look like a tree is based on http://odyniec.net/articles/turning-lists-into-trees/
    $output = theme('item_list', array('items' => $items, 'attributes' => array('class' => array('collections-tree'))));
    return $output;

  }
}

// Recursive helper function to build a recursive array out of an flat array with parent refs.
// From https://stackoverflow.com/a/8587437/5128322.
function buildTree(array $elements, $parentId = 0) {
  $branch = array();
  foreach ($elements as $element) {
    if ($element['parent_delta'] == $parentId) {
      $children = buildTree($elements, $element['id']);
      if ($children) {
        $element['children'] = $children;
      }
      $branch[] = $element;
    }
  }
  return $branch;
}

/**
 * Recursive helper function to get ancestors (not descendants) of a sub-collection.
 * Does not get the top-level parent. That needs to be appended to the array separately at the end.
 */
function ma_collection_get_subcollection_ancestors ($children, $title_components, $coll) {
  $node = node_load($coll['target_id']);
  $title_components[] = $node->title;
  if (isset($children[$coll['parent_delta']])) {
    $title_components = ma_collection_get_subcollection_ancestors($children, $title_components, $children[$coll['parent_delta']]);
  }
  return $title_components;
}

/**
 * Check if a collection has sub-collections.
 */
function ma_collection_check_for_subcollections($current) {
  if (isset($current->field_collections_child_coll[LANGUAGE_NONE])) {
    return TRUE; // collection is top-level collection.
  }
  if (isset($current->field_collections_parent_coll[LANGUAGE_NONE])) {
    $parent = node_load($current->field_collections_parent_coll[LANGUAGE_NONE][0]['target_id']);
    $children = $parent->field_collections_child_coll[LANGUAGE_NONE];
    foreach ($children as $coll_delta => $coll) {
      if ($coll['target_id'] == $current->nid) {
        $current_delta = $coll_delta;
        break;
      }
    }
    if (isset($current_delta)) {
      foreach ($children as $coll) {
        if ($coll['parent_delta'] == $coll_delta) {
          if ($current_delta == $coll_delta) {
            return TRUE; // collection is a sub-collection with sub-collections below it.
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_grants().
 */
function ma_collection_node_grants($account, $op) {
  // Implement the Privacy field on Personal Collections.
  // Uses hook_node_access_records + hook_node_grants as hook_node_access is not respected by Views,
  // ie. the Personal Collections view on the user profile page.
  $grants['personal_collection_public'][] = 0; // everyone can see a public Personal Collection
  $grants['personal_collection_author'][] = array($account->uid); // only the author can see a private Personal Collection
  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function ma_collection_node_access_records($node) {
  if ($node->type == 'personal_collection') {
    $grants = array();
    $grants[] = array(
      'realm' => 'personal_collection_author',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1, // By setting the priority > 0 we override OG's default handling for this DH node
    );
    if ($node->field_personal_coll_privacy[LANGUAGE_NONE][0]['value'] == 'public') {
      $grants[] = [
        'realm' => 'personal_collection_public',
        'gid' => 0,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 1, // By setting the priority > 0 we override OG's default handling for this DH node
      ];
    }
    return $grants;
  }
}

/**
 * Given an array of collections, update the collection titles to show ancestors.
 */
function ma_collection_add_ancestors_to_collections_titles($collections) {
  foreach ($collections as $coll_nid => &$coll_title) {
    if (is_numeric($coll_nid)) {
      $current = node_load($coll_nid);
      if (isset($current->field_collections_parent_coll[LANGUAGE_NONE])) {
        $parent = node_load($current->field_collections_parent_coll[LANGUAGE_NONE][0]['target_id']);
        $title_components = [];
        $children = $parent->field_collections_child_coll[LANGUAGE_NONE];
        foreach ($children as $coll) {
          if ($coll['target_id'] == $coll_nid) {
            $title_components = ma_collection_get_subcollection_ancestors($children, $title_components, $coll);
            $title_components[] = $parent->title;
            $coll_title = implode(' ➞ ', $title_components);
            break;
          }
        }
      }
    }
  }
  return $collections;
}


/**
 * Return a Scald atom sid to display for a collection that doesn't have an image set
 */
function ma_collection_get_default_atom($node) {
    $collection_emw = entity_metadata_wrapper('node', $node);

    // Search through collection items
    foreach ($collection_emw->field_digital_heritage_items->value() as $collection_item) {
        $collection_item_emw = entity_metadata_wrapper('node', $collection_item);

        // Find the first item that has a media asset set.
        if (node_access('view', $collection_item) && isset($collection_item_emw->field_media_asset)) {

            // Look through those media assets
            foreach ($collection_item_emw->field_media_asset->value() as $collection_item_media_index => $collection_item_media) {
                // Return the first normal image
                if ($collection_item_media->provider == 'scald_image') {
                    $atom = $collection_item_emw->field_media_asset->get($collection_item_media_index)->value();

                    // Check if the user has access to that image
                    if(scald_atom_access('view', $atom)) {
                        return $atom->sid;
                    }
                }
            }
        }
    }
}

/**
 * Returns all personal collections a nid is in for a given account.
 */
function ma_collection_find_node_in_personal_collection($nid, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'personal_collection')
    ->fieldCondition('field_digital_heritage_items', 'target_id', $nid)
    ->propertyCondition('uid', $account->uid);
  $result = $query->execute();
  if (isset($result['node'])) {
    return array_keys($result['node']);
  }
  return [];
}

/**
 * Creates icon for add to personal collection, used in 'Mukurtu Icon Actions' DS code field.
 */
function ma_collection_add_to_personal_collection_icon_ds_field($entity) {
  if (drupal_valid_path("node/{$entity->nid}/add-to-personal-collection")) {
    $link = url("ma_collection/nojs/{$entity->nid}/personal_collection");
    $classes = 'ctools-use-modal ctools-modal-add-to-collection';
    $collections = ma_collection_find_node_in_personal_collection($entity->nid);
    if (empty($collections)) {
      $title = t('Add to personal collection');
      print "<a href={$link} title=\"{$title}\" class=\"{$classes}\"><span id=\"star-{$entity->nid}\" class=\"glyphicon glyphicon-star-empty\" aria-hidden=\"true\"></span></a>";
    } else {
      $first_collection = node_load($collections[0]);
      if ($first_collection && isset($first_collection->title)) {
        $title = t('Add to personal collection. Already in personal collection \'@collection\'.', array('@collection' => $first_collection->title));
      } else {
        $title = t('Add to personal collection. Already in a personal collection.');
      }
      print "<a href={$link} title=\"{$title}\" class=\"{$classes}\"><span id=\"star-{$entity->nid}\" class=\"glyphicon glyphicon-star\" aria-hidden=\"true\"></span></a>";
    }
  }
}


/**
 * Implements hook_field_widget_form_alter().
 *
 * Items in Collection field. Do the same as we are doing with field_related_content:
 * 1) Flatten the options (select2 widget works with nested options but not when it is a hidden select field,
 *    which is how we are setting the entity ref field in order for it to be sortable)
 * 2) Prefix each option with the content type so that the already-selected options show which content type it is.
 *    This also means that we see the content type for the non-selected options, despite the content type top-level having been flattened out.
 * 3) Remove the node the user is already on, so that the node cannot self-reference. Aside from being better UI, self-referencing actually causes a fatal error somewhere in mukurtu_related_items_formatter_field_formatter_view().
 */
function ma_collection_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context["field"]["field_name"] == 'field_digital_heritage_items') {
    $new_options = [];
    unset($element['#options']['_none']);
    foreach ($element['#options'] as $content_type => $nodes) {
      foreach ($nodes as $nid => $node_title) {
        if ($nid <> $context["form"]["nid"]["#value"]) {
          $new_options[$nid] = $content_type . ': ' . $node_title;
        }
      }
    }
    $element['#options'] = $new_options;
  }
}
