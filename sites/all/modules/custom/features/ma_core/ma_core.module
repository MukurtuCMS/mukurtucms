<?php
/**
 * @file
 * Code for the Mukurtu Core feature.
 */

include_once('ma_core.features.inc');

/**
 * Implementation of hook_init().
 */
function ma_core_init() {

  // Add the JS for jquery_ui_tooltips. Simply use the class "jquery_ui_tooltip" on any title attribute to use this
  drupal_add_js(drupal_get_path('module', 'ma_core') . '/js/jquery_ui_tooltips.js');

  // Suppress status messages during profile installation
  if ($_GET['profile'] == 'mukurtu') {
     drupal_get_messages(); // clears the message queue by default
  }

}

/**
 * Implements hook_user_login
 */
function ma_core_user_login(&$edit, $account) {

  //// Redirect user on login

  $current_path = current_path();

  // Do not redirect when user is logged in during profile installation, as more work needs to complete first
  if ($_GET['profile']) {
    return;
  }
  // Do not redirect when not coming from the login page, eg.
  // 1. if path is user/redirect, user is performing a password reset, as we do not want to override the redirect to password change form
  // 2. if this is a Mukurtu Mobile login to the services endpoint (see https://www.drupal.org/node/2394235)
  elseif ($current_path <> 'user' AND $current_path <> 'user/login') {
    return;
  }

  global $user;
  if (array_intersect(array('administrator', 'Mukurtu Administrator'), $user->roles)) {
    drupal_goto('dashboard');
  }
  else {
    drupal_goto(); // Non-admin users go to front page
  }
}

/**
 * Get NIDs from an array of nodes
 */
function ma_core_get_nids_from_array_of_nodes ($nodes = NULL) {
  $nids = array();
  if ($nodes) {
    foreach ($nodes as $node) {
      $nids[] = $node->nid;
    }
  }
  return $nids;
}

/**
 * Implements hook_views_pre_build().
 */
// Add the Add and Manage Members links to the group member list, for users with perm to do so
// Note: og_members is an og-provisioned view and view-ui customizations cannot be exported to features
function ma_core_views_pre_build(&$view) {
  if ($view->name == 'group_members') {
    $gid = arg(1);
    if (og_user_access('node', $gid, 'manage members')) {
      $output = '<div class="add-manage-members-links">';
      $output .= '<div class="add-members-link btn btn-default btn-sm">' . l('Add Members', 'group/node/' . $gid . '/admin/people/add-user') . '</div>';
      $output .= '<div class="manage-members-link btn btn-default btn-sm">' . l('Manage Members', 'group/node/' . $gid . '/admin/people') . '</div>';
      $output .= '</div>';
      $view->add_item('default', 'footer', 'views', 'area', array('content' => $output, 'format' => 'full_html'));
    }
  }
}

/**
 * Helper function based on og_extras_get_users_by_roles,
 * but takes role name instead of ID (thus also requiring group bundle param),
 * and returns user objects instead of raw query results.
 */
function ma_core_og_get_users_per_role_and_group ($role_name, $group_bundle, $gid) {
  if ($rid = array_search ($role_name, og_roles('node', $group_bundle, $gid))) {
    $query = db_select('og_users_roles', 'og_users_roles');
    $query->fields('og_users_roles', array('uid'))
      ->condition('gid', $gid)
      ->condition('rid', array ($rid), 'IN')
    ;
    if ($results = $query->execute()
      ->fetchAll()) {
      $uids = array();
      foreach ($results as $result) {
        $uids[] = $result->uid;
      }
      return user_load_multiple ($uids);
    }
  }
}

/**
 * Get all users of a group
 */
function ma_core_og_get_users_in_group($gid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
    ->fieldCondition('og_user_node', 'target_id', $gid);

  if ($results = $query->execute()) {
    $uids = array_keys($results['user']);
    return user_load_multiple($uids);
  }
}

/**
 * Implements hook_menu().
 */
function ma_core_menu() {

  $items = array();
  // Empty home (front) page, added onto via context
  $items['home'] = array(
    'page callback' => 'ma_core_blank_page_callback',
    'access callback' => TRUE,
    'type' => MENU_SUGGESTED_ITEM,
  );

  // Release Notes page
  $version = ma_core_get_version();
  $items['release-notes'] = array(
    'title' => t($version . ' Release Notes'),
    'description' => 'Mukurtu Release Notes',
    'page callback' => 'ma_core_release_notes',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 20,
  );
  return $items;
}

/**
 * Display the content for your blank page.
 */
function ma_core_blank_page_callback() {
  return ' ';
}

/**
 * Menu callback; Mukurtu Release Notes
 */
function ma_core_release_notes () {

  $file = nl2br(file_get_contents('VERSION.md'));
  return check_markup($file, 'markdown');
}


/**
 * Explodes a string of tags into an array.
 * Tweaked drupal_explode_tags that a) uses semicolon instead of comma as delimter, and b) no special handling (ie. not an escape) for quotes
 **/
function ma_core_taxonomy_explode_tags($tags) {
  $regexp = '%(?:^|;\ *)("(?>[^"]*)(?>""[^"]* )*"|(?: [^;]*))%x';
  preg_match_all($regexp, $tags, $matches);
  $typed_tags = array_unique($matches[1]);

  $tags = array();
  foreach ($typed_tags as $tag) {
    $tag = trim($tag);
    if ($tag != "") {
      $tags[] = $tag;
    }
  }

  return $tags;
}

/**
 * Get the version from first line of version.md
 */
function ma_core_get_version() {

  $version_path = DRUPAL_ROOT . '/VERSION.md';
  if (file_exists($version_path)) {
    if ($version_file = fopen($version_path, 'r')) {
      $version = trim(fgets($version_file));
      if ($version = strstr ($version, 'Mukurtu ')) {
        return $version;
      }
    }
  }
}


/**
 * Get a taxonomy term object from a term name in a vocab. Create one if the term doesn't yet exist.
 */
function ma_core_get_create_tax_term ($term_name, $vocab_name) {
  if ($term = taxonomy_get_term_by_name($term_name, $vocab_name)) {
    return current($term);
  }
  else {
    $term = new StdClass();
    $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);
    $term->vid = $vocab->vid;
    $term->name = $term_name;
    taxonomy_term_save($term);
    return $term;
  }
}

