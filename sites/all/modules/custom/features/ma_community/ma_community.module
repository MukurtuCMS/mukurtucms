<?php
/**
 * @file
 * Code for the Mukurtu Community feature.
 */

include_once('ma_community.features.inc');

/**
 * Implements hook_boot().
 */
function ma_community_boot() {
  global $conf;

  $community_changes = array(
      'Request group membership' => 'Request community membership',
      'Unsubscribe from group' => 'Remove community membership',
      'Are you sure you want to unsubscribe from the group %title?' => 'Are you sure you want to remove your membership from the community %title?',
      'In order to join any group, you must <a href="!login">login</a>. After you have successfully done so, you will need to request membership again.' => 'In order to join any community, you must <a href="!login">login</a>. After you have successfully done so, you will need to request membership again.',
      'You already have a pending membership for the group @group.' => 'You already have a pending membership for the community @group.',
      'You are already a member of the group @group.' => 'You are already a member of the community @group.',
      'Are you sure you want to join the group %title?' => 'Are you sure you want to join the community %title?',
  );
  $conf['locale_custom_strings_en'][''] = array_merge($conf['locale_custom_strings_en'][''], $community_changes);
}

/**
 * Implements hook_node_insert().
 */
function ma_community_node_insert($node) {
  if ($node->type == 'community') {
    _set_community_manager_on_community_create ($node);
  }
}

function _set_community_manager_on_community_create ($node) {
  global $user;
  $rid = array_search ('community manager', og_roles('node', 'community', $node->nid));
  og_role_grant('node', $node->nid, $user->uid, $rid);
}

/**
 * Implements hook_node_access().
 */
function ma_community_node_access($node, $op, $account) {
    $type = is_string($node) ? $node : $node->type;

    if($type == 'community') {
        switch($op) {
        case 'create':
            // OG node_access doesn't know what to do for users with no community memberships yet.
            // This causes users like Language Stewards to be presented with the option to create communities, which we don't want.
            // Here we explicitly check for the ability to create communities
            if(!user_access('create community content')) {
                return NODE_ACCESS_DENY;
            }
        }

    }

    return NODE_ACCESS_IGNORE;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function ma_community_form_og_ui_add_users_alter(&$form, &$form_state) {
    // For the OG add user form, default to "Not an invitation"
    if(isset($form['membership_fields']['og_membership_invitation'][LANGUAGE_NONE])){
        $form['membership_fields']['og_membership_invitation'][LANGUAGE_NONE]['#default_value'] = 0;
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ma_community_form_community_node_form_alter(&$form, &$form_state) {
  // custom form fields for the Custom TK Label Text, if at community-level customization
  if (!variable_get('mukurtu_use_sitewide_custom_tk_label_text')) {
    $form = array_merge($form, license_custom_tk_label_form_shared($form['#entity']->nid)); // insert the custom form

    // Move the custom fields into their fieldgroup
    // For some reason, we have to do this separately instead of in the merged in form. If we do it in the merged in form, we lose the advanced tab altogether
    // TODO: figure out how to get this working in the merged in form (reduce repeat code)
    $tk_labels_info = field_info_field('field_licence_trad');
    $tk_labels = $tk_labels_info['settings']['allowed_values'];

    foreach ($tk_labels as $tk_label_uri => $tk_label_name) {
      $tk_label_name_safe = str_replace(' ', '_', $tk_label_name);
      $tk_label_name_safe = str_replace('.', '_', $tk_label_name_safe);

      $checkbox_fieldname = 'custom_' . $tk_label_name_safe;
      $textfield_fieldname = 'customized_' . $tk_label_name_safe;
      $textfield_container = $textfield_fieldname . '_container';
      $form['#group_children'][$checkbox_fieldname] = 'group_custom_tk_label_text';
      $form['#group_children'][$textfield_container] = 'group_custom_tk_label_text';
    }
    $form['#group_children']['usage_message'] = 'group_custom_tk_label_text';
    $form['#group_children']['tk_label_export_link'] = 'group_custom_tk_label_text';
  }

  // Hide the Child Communities field in all cases
  $form['field_child_communities']['#access'] = FALSE;

  // Hide Notified Community Managers field for 2.1 release.
  // May need to expose this conditionally at some point.
  $form['field_dhan_notified_users']['#access'] = FALSE;

  if ($current_nid = $form['nid']['#value']) {
    // Hide the Parent Community field if the user is not a Community Manager of the current community
    $roles = og_get_user_roles('node', $current_nid);
    if (!in_array('community manager', $roles)) {
      $form['field_parent_community']['#access'] = FALSE;
      $do_not_populate = 1;
    }
    // Hide the Parent Community field if the user is not a Community Manager of an already-set Parent Community
    if (isset($form['field_parent_community'][LANGUAGE_NONE]['#default_value'][0])) {
      $parent_roles = og_get_user_roles('node', $form['field_parent_community'][LANGUAGE_NONE]['#default_value'][0]);
      if (!in_array('community manager', $parent_roles)) {
        $form['field_parent_community']['#access'] = FALSE;
        $do_not_populate = 1;
      }
		}

  }

  // Populate the options in the Parent Community field
  if (!isset($do_not_populate)) {
    $all_group_nids = og_get_groups_by_user(NULL, 'node');
    $options = array('_none' => '- None -');
    foreach ($all_group_nids as $group_nid) {
      $roles = og_get_user_roles('node', $group_nid);
      if (in_array('community manager', $roles)) {
        $group = node_load($group_nid);
        $options[$group_nid] = $group->title;
      }
    }
    // Do not allow current community to be set as the Parent Community
    unset ($options[$current_nid]);
    // Set the options
    $form['field_parent_community'][LANGUAGE_NONE]['#options'] = $options;
  }

}

/**
 * Implements hook_node_validate().
 */
function ma_community_node_validate($node, $form, &$form_state) {
  if ($node->type == 'community') {

    // Show warning and require confirmation when setting Parent Community
    $old_parent = "_none";
    if (isset($form['field_parent_community'][LANGUAGE_NONE]['#default_value'][0])) {
      $old_parent = $form['field_parent_community'][LANGUAGE_NONE]['#default_value'][0];
    }
    $new_parent = $form_state['input']['field_parent_community'][LANGUAGE_NONE];

    if (isset($new_parent) && $new_parent != "" && $new_parent != '_none' && $new_parent != $old_parent) {
      // Wanted to use $form['storage'] variable here to set if the warning has already been seen (ie. pass on the second save), but storage vars do not work in the validate/submit context (see: http://drupal.stackexchange.com/questions/18333/storing-permanent-value-in-form-while-in-validation-handler), so we need to use a session var instead that is as specific as possible (node:old_parent:new_parent) to this form.
      // One catch with this implementation is that if the user cancels the node submit, or just closes the tab, the session var will remain, so if they try to do the same change later (same node:old_parent:new_parent), the session var will have already been set and it will submit without the warning.
      $warning_key = $form['nid']['#value'] . ":" . $new_parent . ":" . $old_parent;
      if (!isset($_SESSION['parent_community_change_warning_issued'][$warning_key])) {
        form_set_error('field_parent_community', 'Setting the Parent Community will add all members of this Community to the Parent Community. This cannot be undone! You can unassign the Parent Community but any members added into the Parent Community will remain added unless manually removed.  Press [Save] again to confirm this change.');
        $_SESSION['parent_community_change_warning_issued'][$warning_key] = TRUE;
      }
      else {
        unset($_SESSION['parent_community_change_warning_issued'][$warning_key]);
      }
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function ma_community_node_submit($node, $form, &$form_state) {
  if ($node->type == 'community') {

    // Save the customized TK Labels (custom form fields) to drupal variables (if using community-level customization)
    if (!variable_get('mukurtu_use_sitewide_custom_tk_label_text')) {

      $tk_labels_info = field_info_field('field_licence_trad');
      $tk_labels = $tk_labels_info['settings']['allowed_values'];

      foreach ($tk_labels as $tk_label_uri => $tk_label_name) {
        $tk_label_name_safe = str_replace(' ', '_', $tk_label_name);
        $tk_label_name_safe = str_replace('.', '_', $tk_label_name_safe);
        $checkbox_fieldname = 'custom_' . $tk_label_name_safe;
        $checkbox_value = $form_state['values'][$checkbox_fieldname];
        $custom_tk_variable_name = 'mukurtu_comm_' . $checkbox_fieldname;
        $customized_comm_tk_labels_original = $customized_comm_tk_labels = variable_get($custom_tk_variable_name);

        // Update the checkbox value regardless
        $customized_comm_tk_labels[$form['#node']->nid]['custom'] = $checkbox_value;

        // Only if checkbox is checked, update the text value
        if ($checkbox_value) {
          $textfield_fieldname = 'customized_' . $tk_label_name_safe;
          $textfield_value = $form_state['values'][$textfield_fieldname]['value'];
          $customized_comm_tk_labels[$form['#node']->nid]['text'] = $textfield_value;
        }

        // Set the updated variable if changed
        if ($customized_comm_tk_labels <> $customized_comm_tk_labels_original) {
          variable_set($custom_tk_variable_name, $customized_comm_tk_labels);
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */

function ma_community_node_presave($node) {

  // Add members from child community into parent community when parent community is set
  if ($node->type == 'community') {
    $wrapper_new = entity_metadata_wrapper('node', $node);
    $new_parent = $wrapper_new->field_parent_community->getIdentifier();
    $old_parent = "";
    if ($new_parent) {
      if (isset($node->original)) {
        $wrapper_old = entity_metadata_wrapper('node', $node->original);
        $old_parent = $wrapper_old->field_parent_community->getIdentifier();
      }
      if ($new_parent <> $old_parent) {
        if ($child_users = ma_core_og_get_users_in_group ($node->nid)) {
          $_SESSION['repress_user_add_messages'] = 1;
          foreach ($child_users as $child_user) {
            $values = array(
              'entity' => $child_user,
              'state' => OG_STATE_ACTIVE,
            );
            og_group('node', $new_parent, $values);
          }
          unset ($_SESSION['repress_user_add_messages']);
          drupal_set_message (t('Members of <i>' . $node->title . '</i> have been added to the Parent Community <i>' . $wrapper_new->field_parent_community->label() . '</i>'));
        }
      }
    }
  }
}
