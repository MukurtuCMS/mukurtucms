<?php
// $Id$
/**
 * @file mukurtu_splash.module
 * Displays a block of configuration links in a Colorbox popup.
 */

/**
 * Implementation of hook_menu().
 */
function mukurtu_splash_menu() {
  $items['splash/%mukurtu_splash_block'] = [
    'title' => '',
    'page callback' => 'mukurtu_splash_block_display',
    'page arguments' => [1],
    'access callback' => TRUE,
  ];
  $items['wizard/toggle'] = [
    'title' => '',
    'page callback' => 'mukurtu_splash_toggle_wizard',
    'access callback' => TRUE,
  ];

  // Page to enable/disable collaboration tools.
  if (ma_splash_prerelease_functionality_enabled('ma_collaboration_tools')) {
    $items['manage-collaboration-tools'] = [
      'title' => 'Manage Collaboration Tools',
      'page callback' => 'drupal_get_form',
      'page arguments' => ['ma_splash_manage_collaboration_tools'],
      'access arguments' => ['administer site configuration'],
    ];
  }

  return $items;
}

/**
 * toggle if the user can see the wizard
 * user variable disable_wizard
 */
function mukurtu_splash_toggle_wizard() {
  global $user;

  $account = user_load($user->uid);

  // Hasn't been set yet. Default is disabled, so toggle results in enabled.
  if (!isset($account->data['disable_wizard'])) {
    $edit = ['data' => ['disable_wizard' => FALSE]];
  } else {
    // It is set for this user, flip the boolean.
    $edit = ['data' => ['disable_wizard' => !$account->data['disable_wizard']]];
  }

  user_save($account, $edit);

  if (isset($_GET['destination'])) {
    drupal_goto($_GET['destination']);
  }
  else {
    drupal_goto('dashboard');
  }
}

/**
 * Toggle the dictionary feature on and off
 */
function ma_splash_toggle_dictionary() {
  if (module_exists('ma_dictionary')) {
    module_disable(['ma_dictionary']);
    menu_link_delete(NULL, 'dictionary');
    menu_link_delete(NULL, 'node/add/dictionary-word');
    drupal_set_message('The Dictionary has been disabled.');
  }
  else {
    module_enable(['ma_dictionary']);
    // Re-add the menu link. Any customizations thereof would be lost by a disable and renenabling of the Dictionary
    $item = [
      'link_path' => 'dictionary',
      'link_title' => 'Browse Dictionary',
      'menu_name' => 'menu-browse-menu',
      'weight' => -40,
      'expanded' => 0,
      'customized' => 1,
    ];
    menu_link_save($item);
    drupal_set_message('The Dictionary has been enabled.');
  }
  drupal_goto('dashboard');
}

/**
 * Manage Collaboration Tools form
 */
function ma_splash_manage_collaboration_tools($form, &$form_state) {

  $form['#prefix'] = "<h3>Overview</h3><p>Collaboration Tools is beta functionality that allows Cultural Protocols to host collaborative content amongst its members. There are: <ul><li>Calendars, which contain Events</li><li>Discussion Spaces, which contain Discussion Topics</li><li>Document Libraries, which contain Document Pages</li></ul><p>The parent types -- Calendars, Discussion Spaces, and Document Libraries -- can belong to one or more Cultural Protocols. The child types -- Events, Discussion Topics, and Document Pages -- belong each to only one parent, inheriting their parent's Cultural Protocol(s).</p><p>Child content may be commented on by members of its Cultural Protocol(s). Comments may be nested, for subthreaded discussions.</p><p>Child content may be followed by individual users or all users of a Protocol, such that those users are emailed notifications whenever the content is updated or commented on. Users can limit their email notifications to daily or weekly digest formats. They can set a default notification frequency, and they can also override that frequency on a per-content basis, such that they are notified daily on changes/comments to content A, but immediately on changes/comments to content B.<p>Comment notifications, when sent immediately, may be replied to via email directly, which adds the email reply as its own comment. In this way, discussions can be carried out via email without logging on to the site.</p><p>Users are provided an overview page of all content they are following via a tab on their profile page. Here they can unfollow content, change their default notification frequency, and change their individual content notification freqencies.</p>";

  $form['collab_tools_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('<h4>Enable Collaboration Tools</h4><p>You are free to check or uncheck this without content loss -- collaboration content created while Collaboration Tools is enabled is not deleted if Collaboration Tools is subsequently disabled. Instead it just becomes hidden/inaccessible. Re-enabling Collaboration Tools will reinstate the content.</p>'),
    '#default_value' => variable_get('collab_tools_enabled'),
  ];
  $form['configure'] = [
    '#type' => 'fieldset',
    '#title' => t('Configure Email Notifications'),
    '#states' => [
      'visible' => [
        ':input[name="collab_tools_enabled"]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['configure']['1'] = [
    '#type' => 'item',
    '#markup' => t('1. The PHP IMAP extension needs to be enabled. Typical PHP installations do not have it enabled by default. Please contact your system administrator and/or webhost to ensure that this extension is enabled before proceeding.'),
  ];
  $form['configure']['2'] = [
    '#type' => 'item',
    '#markup' => t("2. An email account needs to be created that automatically handles email replies. This account needs to be separate from the " . l('system email', 'admin/config/system/site-information') . ", as it will be inundated with emails. It is highly preferable that this email account uses the same domain as the system email, or else users will see warnings when replying to email that the sending domain and reply-to domains are different, and the notifications may end up in users' spam folders. Please proceed with setting up a new IMAP email account then fill in the following fields:"),
  ];
  $form['configure']['address'] = [
    '#type' => 'textfield',
    '#title' => t('Email address'),
    '#default_value' => variable_get('mailcomment_mailbox'),
  ];
  $form['configure']['domain'] = [
    '#type' => 'textfield',
    '#title' => t('Domain'),
    '#default_value' => variable_get('collab_tools_email_domain'),
    '#description' => t('The domain of the server used to collect mail (eg. imap.gmail.com).'),
  ];
  $form['configure']['name'] = [
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('collab_tools_email_username'),
    '#description' => t('This username is used while logging into this mailbox during mail retrieval.'),
  ];
  $form['configure']['pass'] = [
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('collab_tools_email_password'),
    '#description' => t('The password corresponding to the username above. Consider using a non-vital password, since this field is stored without encryption in the database.'),
  ];

  $form['configure']['3'] = [
    '#type' => 'item',
    '#markup' => t('3. For replying via email to comments to work, and for daily and weekly email notification digests to work, a cron job needs to be set up to run on the site. Drupal\'s "automatic cron" method is not sufficient for this. Instead, have your system administrator set up a cron job (or use a cron service) as explained as the "second way" at ' . l('drupal.org', 'https://www.drupal.org/docs/7/setting-up-cron/overview') . '. Comments are imported from email replies on every cron run, so a frequency of at least every 5 minutes is recommended. There is no need to disable automatic cron.'),
  ];

  $form['gmaps_api_key'] = [
    '#type' => 'textfield',
    '#title' => t('Google Maps API Key (optional)'),
    '#description' => t('For the map to show on events, obtain a Google Maps Javascript API key at <a href="@link">@link</a> and paste it here.', [
      '@link' => 'https://developers.google.com/maps/documentation/javascript/get-api-key',
    ]),
    '#default_value' => variable_get('geofield_map_google_apikey', ''),
    '#states' => [
      'visible' => [
        ':input[name="collab_tools_enabled"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['submit_button'] = [
    '#type' => 'submit',
    '#value' => t('Save Settings'),
  ];
  return $form;
}

/**
 * Manage Collaboration Tools form submit handler
 */
function ma_splash_manage_collaboration_tools_submit($form, &$form_state) {
  variable_set('collab_tools_enabled', $form_state['values']['collab_tools_enabled']);
  if ($form_state['values']['collab_tools_enabled']) {

    // Enable the feature
    module_enable(['ma_collaboration_tools']);

    // Clear cache
    drupal_flush_all_caches();

    // Set the mailhandler mailbox
    variable_set('mailcomment_mailbox', $form_state['values']['address']);
    variable_set('collab_tools_email_domain', $form_state['values']['domain']);
    variable_set('collab_tools_email_username', $form_state['values']['name']);
    variable_set('collab_tools_email_password', $form_state['values']['pass']);
    variable_set('geofield_map_google_apikey', $form_state['values']['gmaps_api_key']);

    $mailbox = [
      'mail' => 'collaboration_tools',
      'admin_title' => 'collaboration_tools',
      'settings' => serialize([
        'type' => 'imap',
        'folder' => 'INBOX',
        'domain' => $form_state['values']['domain'],
        'port' => '993',
        'insecure' => 0,
        'name' => $form_state['values']['name'],
        'pass' => $form_state['values']['pass'],
        'extraimap' => '/imap/ssl/novalidate-cert/norsh',
        'limit' => '0',
        'encoding' => 'UTF-8',
        'flag_after_read' => 1,
        'delete_after_read' => 0,
        'fromheader' => 'From',
        'security' => '0',
        'replies' => '0',
        'retrieve' => 'MailhandlerPhpImapRetrieve',
        'readonly' => 0,
      ]),
    ];
    db_merge('mailhandler_mailbox')
      ->key(['mail' => 'collaboration_tools'])
      ->fields($mailbox)
      ->execute();

    // Show message
    drupal_set_message('Collaboration Tools settings saved.');

  }

  else {

    // Disable the feature
    module_disable(['ma_collaboration_tools']);

    // Sow message
    drupal_set_message('Collaboration Tools settings saved.');

  }
}

/**
 * Implementation of hook_init().
 */
function mukurtu_splash_init() {
  drupal_add_js(drupal_get_path('module', 'mukurtu_splash') . '/mukurtu_splash.js');

  drupal_add_css(drupal_get_path('module', 'mukurtu_splash') . '/mukurtu_splash.css');

  // Logged out users
  /*
    if(drupal_is_front_page()
        && !user_access('administer site configuration')
        && !isset($_COOKIE['prealpha_seen'])
        && !user_is_logged_in()
        ){

      setcookie('prealpha_seen', "seen", time + 3600 * 24 * 180);

      $url = url('splash/site_prealpha');

      $js = 'jQuery(document).ready(function () { jQuery.colorbox({ ';
      $js .= 'href: "' . $url . '",';
      $js .= 'width: 800,';
      $js .= 'height: 550,';
      $js .= 'opacity: .6,';
      $js .= '});});';

      drupal_add_js(drupal_get_path('module', 'mukurtu_splash') . '/mukurtu_splash.js');
      drupal_add_js($js, array('type' => 'inline', 'group' => JS_THEME, 'every_page' => TRUE));
    }
  */


  // Admin splash screens.

  // Config Site
  /*
    if (drupal_is_front_page()
        && user_access('administer site configuration')

        && !variable_get('mukurtu_splash_config_seen', FALSE)
        ) {

      variable_set('mukurtu_splash_config_seen', TRUE);

      $url = url('splash/site_config');

      $js = 'jQuery(document).ready(function () { jQuery.colorbox({ ';
      $js .= 'href: "' . $url . '",';
      $js .= 'width: 800,';
      $js .= 'height: 480,';
      $js .= 'opacity: .6,';
      $js .= '});});';

      drupal_add_js(drupal_get_path('module', 'mukurtu_splash') . '/mukurtu_splash.js');
      drupal_add_js($js, array('type' => 'inline', 'group' => JS_THEME, 'every_page' => TRUE));
    }
  */
  /*

    // Site configured admin welcome screen
    if (drupal_is_front_page()
        && user_access('administer site configuration')
        && !variable_get('mukurtu_splash_welcome_seen', FALSE)
        ) {

      $url = url('splash/site_welcome');

      $js = 'jQuery(document).ready(function () { jQuery.colorbox({ ';
      $js .= 'href: "' . $url . '",';
      $js .= 'width: 600,';
      $js .= 'height: 400,';
      $js .= 'opacity: .6,';
      $js .= '});});';
      drupal_add_js(drupal_get_path('module', 'mukurtu_splash') . '/mukurtu_splash.js');
      drupal_add_js($js, array('type' => 'inline', 'group' => JS_THEME, 'every_page' => TRUE));

      // This makes it so that the splash page will never show up again, unless
      // this variable is set back to FALSE.
      variable_set('mukurtu_splash_welcome_seen', TRUE);
    }

    $mod_uri = drupal_get_path('module', 'mukurtu_splash');
    drupal_add_css( $mod_uri . '/mukurtu_splash.css');
  */
}

/**
 * Implementation of hook_block_info().
 */
function mukurtu_splash_block_info() {
  $blocks['site_welcome'] = [
    'info' => t('Welcome message splash screen'),
  ];

  $blocks['site_prealpha'] = [
    'info' => t('Alpha Site Notice'),
  ];
  $blocks['site_start'] = [
    'info' => t('Mukurtu Dashboard: Site Start'),
  ];
  $blocks['demo_config'] = [
    'info' => t('Mukurtu Dashboard: Add Demo Content'),
  ];
  $blocks['site_config'] = [
    'info' => t('Mukurtu Dashboard: Configure Mukurtu'),
  ];
  $blocks['batch_import'] = [
    'info' => t('Mukurtu Dashboard: Import/Export Content'),
  ];
  $blocks['manage_content'] = [
    'info' => t('Mukurtu Dashboard: Manage Content'),
  ];
  $blocks['manage_taxonomy'] = [
    'info' => t('Mukurtu Dashboard: Manage Categories & Keywords'),
  ];
  $blocks['manage_community'] = [
    'info' => t('Mukurtu Dashboard: Manage Communities'),
  ];
  $blocks['manage_dictionary'] = [
    'info' => t('Mukurtu Dashboard: Manage Dictionary'),
  ];
  $blocks['support'] = [
    'info' => t('Mukurtu Dashboard: Support'),
  ];
  $blocks['user'] = [
    'info' => t('Mukurtu Dashboard: User'),
  ];

  $blocks['mukurtu_wizard'] = [
    'info' => t('Mukurtu Dashboard: Getting Started Guide'),
  ];

  $blocks['mukurtu_group_management'] = [
    'info' => t('Mukurtu Group Management Links'),
  ];
  return $blocks;
}


/**
 * Implementation of hook_block_view().
 */
function mukurtu_splash_block_view($delta = '') {
  $block = [];

  switch ($delta) {
    case 'site_welcome':
      $block['subject'] = t('You have successfully installed Mukurtu.');
      $block['content'] = mukurtu_splash_block_site_welcome();
      break;
    case 'site_prealpha':
      /*       $block['subject'] = '<h1>' .t('Alpha!') . '</h1>'; */
      $block['content'] = mukurtu_splash_block_site_prealpha();
      break;
    case 'site_start':
      $block['subject'] = t('Set up Site');
      $block['content'] = mukurtu_splash_block_site_start();
      break;
    case 'demo_config':
      $block['subject'] = t('Mukurtu Demo Content');
      $block['content'] = mukurtu_splash_block_demo_config();
      break;
    case 'site_config':
      $block['subject'] = t('Mukurtu Configuration');
      $block['content'] = mukurtu_splash_block_site_config();
      break;
    case 'batch_import':
      $block['subject'] = t('Batch Import Content');
      $block['content'] = mukurtu_splash_block_batch_import();
      break;
    case 'manage_content':
      $block['subject'] = t('Content and Collections');
      $block['content'] = mukurtu_splash_block_manage_content();
      break;
    case 'manage_taxonomy':
      $block['subject'] = t('Categories & Keywords');
      $block['content'] = mukurtu_splash_block_manage_taxonomy();
      break;
    case 'manage_community':
      $block['subject'] = t('Communities and Protocols');
      $block['content'] = mukurtu_splash_block_manage_community();
      break;
    case 'manage_dictionary':
      $block['subject'] = t('Dictionary');
      $block['content'] = mukurtu_splash_block_manage_dictionary();
      break;
    case 'support':
      $block['subject'] = t('Support');
      $block['content'] = mukurtu_splash_block_support();
      break;
    case 'user':
      $block['subject'] = t('Site Users');
      $block['content'] = mukurtu_splash_block_user();
      break;
    case 'mukurtu_wizard':
      $block['subject'] = '';
      $block['content'] = mukurtu_splash_block_wizard();
      break;
    case 'mukurtu_group_management':
      $block['subject'] = t('Group Management Links');
      $block['content'] = mukurtu_splash_block_group_links();
      break;
  }
  return $block;
}

/**
 * Loader function for hook_menu().
 */
function mukurtu_splash_block_load($delta) {
  return block_load('mukurtu_splash', $delta);
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_site_prealpha() {

  $output = '<h1>' . variable_get('mukurtu_city_name', 'Mukurtu') . '</h1>';
  $output .= '<img src="' . base_path() . path_to_theme() . '/images/mukurtu_alpha.png" alt="Mukurtu Alpha" />';
  $output .= '<p>' . t('This is a new site, we are understanding how best to make the site useful to you.') . '</p>';
  $output .= '<p>' . t('We are inviting folks to test the site and add information to it. [Link]');

  $block = [
    '#markup' => $output,
  ];
  return $block;

}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_site_welcome() {
  $markup = '';
  $markup .= '<p><strong>' . t('Next:') . '</strong>' . t('Setup your site. Go to the !dashboard.', ['!dashboard' => l(t('Dashboard'), 'admin/dashboard', ['attributes' => ['class' => ['mukurtu-splash-link']]])]) . '</p>';
  /*   $markup .= '<p>' . t('Tell us what you think, or better yet, !contribute to make it even better.', array('!contribute' => l(t('contribute to Mukurtu'), 'http://mukurtu.org/'))) . '</p>'; */

  $block = [
    '#markup' => $markup,
  ];
  return $block;
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_site_start() {
  global $theme;

  $items = [];
  $items_layout = [];

  $markup = '';

  if (user_access('administer site configuration')) {
    $items[] = [
      'title' => 'Change site name, slogan and email address.',
      'href' => 'admin/config/system/site-information',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Shortcut to page where you can change some settings for this site. The site name, a slogan for your site, and the email address for the site administrator.'),
    ];
  }

  if (user_access('administer themes')) {
    $items[] = [
      'title' => 'Change Logo',
      'href' => 'admin/appearance/settings/mukurtu_starter',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Shortcut to theme settings where you can change your logo.'),
    ];
  }

  $items[] = [
    'title' => 'View & Edit About page',
    'href' => 'about',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('Mukurtu comes with a default about page that you can edit.'),
  ];


  if (user_access('administer menu')) {
    $items[] = [
      'title' => 'Enable and disable extra menu items',
      'href' => 'admin/structure/menu/manage/menu-browse-menu',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Mukurtu comes with additional pages that you can enable.'),
    ];
  }

  if (user_access('edit boxes') && ($theme == 'mukurtu_starter')) {
    $items_layout[] = [
      'title' => 'Edit Custom Site Header',
      'href' => 'admin/structure/block/manage/boxes/ma_site_header/configure',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Edit HTML markup of Custom Site Header'),
    ];

    $items_layout[] = [
      'title' => 'Edit Custom Site Footer',
      'href' => 'admin/structure/block/manage/boxes/ma_site_footer/configure',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Edit HTML markup of Custom Site Footer'),
    ];
  }

  if (user_access('administer site configuration')) {
    // Theme settings page link.
    if (drupal_valid_path('admin/appearance/settings/' . $theme)) {
      $items_layout[] = [
        'title' => 'Change Theme Settings',
        'href' => 'admin/appearance/settings/' . $theme,
        'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
        'description' => t('Change settings for the currently active theme.'),
      ];
    }

    if (variable_get('mukurtu_show_related_items_teasers')) {
      $enable_disable_word = 'Disable';
    }
    else {
      $enable_disable_word = 'Enable';
    }
    $items_layout[] = [
      'title' => $enable_disable_word . ' Related Items teasers',
      'href' => 'admin/toggle-related-items-teasers',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t($enable_disable_word . ' Related Items teasers at top of right of Digital Heritage items.'),
    ];

    $items_layout[] = [
      'title' => 'Configure Default Browse Page',
      'href' => 'admin/config/mukurtu/select-default-browse-page',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Select the default content browse page.'),
    ];
  }


  // remove the block if it's empty
  if (sizeof($items) < 2) {
    return;
  }

  $content = ['content' => $items];
  $markup .= theme('admin_block_content', $content);

  $markup .= '<strong>Layout and Design</strong>';
  $content = ['content' => $items_layout];
  $markup .= theme('admin_block_content', $content);

  $block = [
    '#markup' => $markup,
  ];
  return $block;
}


/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_site_config() {

  $items = [];

  $markup = '';

  if (user_access('administer site configuration')) {
    $items[] = [
      'title' => 'Configure Google Analytics',
      'href' => 'admin/config/system/googleanalytics',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('You will need to create a Google Analytics account and then configure Google Analytics on this site.'),
    ];

    $items[] = [
      'title' => 'Configure Google Maps API Key',
      'href' => 'admin/config/content/geofield_map',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('A Google Maps API key is required for some mapping features to function.'),
    ];

    $items[] = [
      'title' => 'Configure Mollom',
      'href' => 'admin/config/content/mollom/settings',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Mollom is a content moderation web service used to filter out spam and malicious content.  Requires a Mollom account.'),
    ];

    $items[] = [
      'title' => 'Rebuild Site Permissions',
      'href' => 'admin/reports/status/rebuild',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('If doing a lot of site content editing, you may need to rebuild permissions to make sure that access permissions remain set correctly.'),
    ];

    if (module_exists('mukurtu_content_warnings') && drupal_valid_path('admin/config/mukurtu/content-warnings')) {
      $items[] = [
        'title' => 'Configure Media Warnings',
        'href' => 'admin/config/mukurtu/content-warnings',
        'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
        'description' => t('Configure click-through overlays for potentially sensitive media.'),
      ];
    }

    if (module_exists('ma_mobile_client')) {
      $items[] = [
        'title' => 'Configure Mukurtu Mobile',
        'href' => 'mukurtu-mobile',
        'localized_options' => [
          'attributes' => ['class' => ['opic-dashboard-content']],
          'query' => drupal_get_destination(),
        ],
        'description' => t("Configure access to the site with the Mukurtu Mobile client."),
      ];
    }

    if (user_access('administer modules')) {
      $items[] = [
        'title' => 'Enable/Disable Mukurtu Modules',
        'href' => 'admin/modules',
        'localized_options' => [
          'attributes' => ['class' => ['opic-dashboard-content']],
          'fragment' => 'mukurtu',
        ],
        'description' => t('Go to the management page for Mukurtu specific modules.'),
      ];
    }

    if (ma_splash_prerelease_functionality_enabled('ma_collaboration_tools') && user_access('administer site configuration')) {
      $items[] = [
        'title' => 'Manage Collaboration Tools',
        'href' => 'manage-collaboration-tools',
        'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
        'description' => t('Enable, disable, and configure the Collaboration Tools'),
      ];
    }

    $content = ['content' => $items];
    $markup = theme('admin_block_content', $content);

    $block = [
      '#markup' => $markup,
    ];
  }

  return $block;
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_manage_content() {
  $admin = user_role_load_by_name('administrator');
  $mukurtuadmin = user_role_load_by_name('Mukurtu Administrator');

  $items = [];

  $markup = '';

  if (node_access('create', 'digital_heritage')) {
    $items[] = [
      'title' => 'Add a Digital Heritage item',
      'href' => 'node/add/digital-heritage',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Add a Digital Heritage Item.'),
    ];
  }

  if (node_access('create', 'collection')) {
    $items[] = [
      'title' => 'Create a Collection',
      'href' => 'node/add/collection',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Create a collection of digital heritage.'),
    ];
  }

  if (user_access('access content overview')) {
    $items[] = [
      'title' => 'Manage Content',
      'href' => 'admin/content',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('View all content on the site'),
    ];
  }


  if (user_has_role($admin->rid) || user_has_role($mukurtuadmin->rid)) {
    $items[] = [
      'title' => 'View Media',
      'href' => 'admin/content/atoms',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('View all media assets.'),
    ];
  }

  if (scald_atom_add_access()) {
    $items[] = [
      'title' => 'Add Media',
      'href' => 'atom/add',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Add new media files.'),
    ];
  }

  if (user_access('access administration pages')) {
    $items[] = [
      'title' => 'List of Indexed Fields',
      'href' => 'indexed-fields',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('List of fields that will return results if their contents match user searches.'),
    ];
  }

  if (user_access('create fixity_check content')) {
    $items[] = [
      'title' => 'File Fixity Checks',
      'href' => 'fixity-checks',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('View, manage, create, and run file fixity checks, to assure of Media Asset integrity.'),
    ];
  }

  $content = ['content' => $items];
  $markup = theme('admin_block_content', $content);

  $block = [
    '#markup' => $markup,
  ];
  return $block;
}

/**
 * Helper function to assemble the dictionary management block.
 */
function mukurtu_splash_block_manage_dictionary() {
  $items = [];
  $markup = '';

  $mukurtu_admin = user_role_load_by_name('Mukurtu Administrator');
  $drupal_admin = user_role_load_by_name('administrator');

  $vocabulary = taxonomy_vocabulary_machine_name_load('language');
  if (user_access('edit terms in ' . $vocabulary->vid)) {
    $items[] = [
      'title' => 'Manage Languages',
      'href' => 'admin/structure/taxonomy/language',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Manage the terms in the Language taxonomy. A language must exist in this taxonomy before a dictionary or language community can be added.'),
    ];
  }

  if (module_exists('ma_dictionary') && user_access('administer taxonomy')) {
    $items[] = [
      'title' => 'Set Default Language',
      'href' => 'dashboard/set-default-language',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Set the default language used when creating dictionary words.'),
    ];
  }

  if (module_exists('ma_dictionary') && (user_has_role($mukurtu_admin->rid) || user_has_role($drupal_admin->rid))) {
    $items[] = [
      'title' => 'Customize Dictionary Alphabetical Order',
      'href' => ma_dictionary_get_aod_add_edit_path(),
      'localized_options' => [
        'attributes' => ['class' => ['opic-dashboard-content']],
        'query' => drupal_get_destination(),
      ],
      'description' => t("Customize the alphabetical ordering rules of the Dictionary according to its language."),
    ];
  }

  if (module_exists('ma_dictionary') && (user_has_role($mukurtu_admin->rid) || user_has_role($drupal_admin->rid))) {
    $items[] = [
      'title' => 'Manage Language Communities',
      'href' => 'dashboard/manage-dictionaries',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Manage the language communities that control access to the dictionaries.'),
    ];
  }

  $vocabulary = taxonomy_vocabulary_machine_name_load('part_of_speech');
  if (user_access('edit terms in ' . $vocabulary->vid)) {
    $items[] = [
      'title' => 'Manage Part of Speech',
      'href' => 'admin/structure/taxonomy/part_of_speech',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Manage the terms in the Part of Speech taxonomy.'),
    ];
  }

  if (module_exists('ma_dictionary') && user_access('create word_list content')) {
    $items[] = [
      'title' => 'Create a Word List',
      'href' => 'node/add/word-list',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Create a list of dictionary words.'),
    ];
  }

  $content = ['content' => $items];
  $markup = theme('admin_block_content', $content);

  $block = [
    '#markup' => $markup,
  ];
  return $block;
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_batch_import() {

  $items = [];

  $markup = '';

  if (feeds_access('import', 'mukurtu_import_node_digital_heritage')) {
    $items[] = [
      'title' => 'Import Digital Heritage Items',
      'href' => 'import/mukurtu_import_node_digital_heritage',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Batch import many digital heritage items from CSV file. If the media assets have associated metadata, import the media files first using the media importers.'),
    ];
  }

  if (feeds_access('import', 'digital_heritage_dc') && ma_splash_prerelease_functionality_enabled('ma_importexport_dc')) {
    $items[] = [
      'title' => 'Import Digital Heritage Dublin Core and MODS XML Metadata',
      'href' => 'import/digital-heritage-xml-file',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Batch import many digital heritage items from a Dublin Core or MODS XML file.'),
    ];
  }

  // Only show these import/export dashboard links to Mukurtu or Drupal Admins
  $mukurtu_admin = user_role_load_by_name('Mukurtu Administrator');
  $drupal_admin = user_role_load_by_name('administrator');

  if (user_has_role($mukurtu_admin->rid) || user_has_role($drupal_admin->rid)) {
    if (module_exists('ma_dictionary')) {
      $items[] = [
        'title' => 'Import Dictionary Words',
        'href' => 'import/mukurtu_import_node_dictionary_word',
        'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
        'description' => t('Batch import many dictionary words.'),
      ];

      $items[] = [
        'title' => 'Import Dictionary Word Entries',
        'href' => 'import/mukurtu_import_paragraphs_item_dictionary_word_bundle',
        'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
        'description' => t('Batch import additional dictionary word entries.'),
      ];
    }

    $items[] = [
      'title' => 'All Importers',
      'href' => 'import',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('View a list of all available importers.'),
    ];

    $items[] = [
      'title' => 'Export Digital Heritage Items',
      'href' => 'manage/digital-heritage',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Select digital heritage items for exporting to a CSV or XML file.'),
    ];

    $items[] = [
      'title' => 'Export Media (Scald Atoms)',
      'href' => 'manage/scald-atoms',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Select media for exporting to a CSV file.'),
    ];

    $items[] = [
      'title' => 'Export Dictionary Words',
      'href' => 'manage/dictionary-words',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Select dictionary words for exporting to a CSV file.'),
    ];

    if (feeds_access('import', 'digital_heritage_metadata')) {
      $items[] = [
        'title' => 'Import from Zip Archive',
        'href' => 'manage/zip_import',
        'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
        'description' => t('Batch import content from a Zip Archive.'),
      ];
    }
  }

  if (count($items) < 1) {
    return;
  }

  $content = ['content' => $items];
  $markup = theme('admin_block_content', $content);

  $block = [
    '#markup' => $markup,
  ];
  return $block;
}


/**
 * Manage categories and keywords
 *
 * @return array
 * @throws Exception
 */
function mukurtu_splash_block_manage_taxonomy() {
  $items = [];

  $markup = '';

  global $user;

  $vocabulary = taxonomy_vocabulary_machine_name_load('category');
  if (user_access('edit terms in ' . $vocabulary->vid)) {
    $items[] = [
      'title' => 'Add One Category',
      'href' => 'admin/structure/taxonomy/category/add',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Add a category'),
    ];

    $items[] = [
      'title' => 'Manage Categories',
      'href' => 'admin/structure/taxonomy/category',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Manage all categories'),
    ];
  }

  if (feeds_access('import', 'import_categories')) {
    $items[] = [
      'title' => 'Import Many Categories',
      'href' => 'import/import_categories',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Batch import many categories from CSV file. Import Media first.'),
    ];
  }

  $vocabulary = taxonomy_vocabulary_machine_name_load('tags');
  if (user_access('edit terms in ' . $vocabulary->vid)) {
    $items[] = [
      'title' => 'Add One Keyword',
      'href' => 'admin/structure/taxonomy/tags/add',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Add a Keyword'),
    ];

    $items[] = [
      'title' => 'Manage Keywords',
      'href' => 'admin/structure/taxonomy/tags',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Manage all keywords'),
    ];
  }

  $content = ['content' => $items];
  $markup = theme('admin_block_content', $content);

  $block = [
    '#markup' => $markup,
  ];
  return $block;
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_demo_config() {

  $items = [];

  $markup = '';

  $items[] = [
    'title' => 'Download Sample Content',
    'href' => 'https://github.com/codamatic/mukurtu-demo-content/zipball/master',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('100MB of Demo Content. Download from Github: https://github.com/codamatic/mukurtu-demo-content'),
  ];

  $items[] = [
    'title' => '1. Add Media',
    'href' => 'file/add',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('Batch add media files.'),
  ];

  $items[] = [
    'title' => '2. Import Many Cultural Protocols',
    'href' => 'import/import_cultural_protocols',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('Batch import many cultural protocols from CSV file.  Import Media first.'),
  ];

  $items[] = [
    'title' => '3. Import Many Communities',
    'href' => 'import/import_communities',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('Batch import many communities from CSV file. Import Media first.'),
  ];

  $items[] = [
    'title' => '4. Add Many Users',
    'href' => 'import/import_users',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('Batch import many users from CSV file'),
  ];

  $items[] = [
    'title' => '5. Import Many Categories',
    'href' => 'import/import_categories',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('Batch import many categories from CSV file. Import Media first.'),
  ];

  $items[] = [
    'title' => '6. Import Digital Heritage Metadata',
    'href' => 'import/digital_heritage_metadata',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('Batch import many digital heritage items from CSV file. Import Media first.'),
  ];

  $content = ['content' => $items];
  $markup = theme('admin_block_content', $content);

  $block = [
    '#markup' => $markup,
  ];
  return $block;
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_manage_community() {

  $items = [];

  $markup = '';

  //$markup .= l('Help','admin/dashboard',array('attributes' => array('title'=>'Help content for managing communities', 'id' => 'help-icon-community', 'class' => array('jquery-ui-tooltip'))));


  $items[] = [
    'title' => 'Manage Communities and Protocols',
    'href' => 'dashboard/communities',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('Add/edit Communities'),
  ];

  if (node_access('create', 'community')) {
    $items[] = [
      'title' => 'Create Community',
      'href' => 'node/add/community',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Add Communities'),
    ];
  }

  if (node_access('create', 'cultural_protocol_group')) {
    $items[] = [
      'title' => 'Create Cultural Protocol',
      'href' => 'node/add/cultural-protocol-group',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Add Protocols'),
    ];
  }

  if (user_access('administer site configuration')) {
    $dh_tk_description = 'Switch digital heritage traditional knowledge label text customization from community-level to site-wide.';
    if (variable_get('mukurtu_use_sitewide_custom_tk_label_text')) {
      $dh_tk_description = 'Switch digital heritage traditional knowledge label text customization from site-wide to community-level.';
    }
    $items[] = [
      'title' => 'Toggle TK Label Text Customization Level',
      'href' => 'dashboard/toggle-custom-tk-label-text',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t($dh_tk_description),
    ];
    if (variable_get('mukurtu_use_sitewide_custom_tk_label_text')) {
      $items[] = [
        'title' => 'Customize Site-Wide TK Label Text',
        'href' => 'dashboard/customize-tk-label-text',
        'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
        'description' => t('Customize site-wide digital heritage traditional knowledge label text.'),
      ];
    }
  }


  /*if (feeds_access('import','import_cultural_protocols')) {
    $items[] = array(
      'title' => 'Import Cultural Protocols',
      'href' => 'import/import_cultural_protocols',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Import many Cultural Protocols'),
    );
  }*/


  /*
  $items[] = array (
    'title' => 'View Users',
    'href' => 'admin/people',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('View people with accounts.'),
  );

  $items[] = array (
    'title' => 'Add User',
    'href' => 'admin/people/create',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Create an account for a user.'),
  );
  $items[] = array (
    'title' => 'Add Many Users',
    'href' => 'import/import_users',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Batch import many users from CSV file'),
  );

  $items[] = array (
    'title' => 'View All Groups',
    'href' => 'group-list',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('View all groups'),
  );



  $items[] = array (
    'title' => 'Add One Community',
    'href' => 'node/add/community',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Add a Community'),
  );

  $items[] = array (
    'title' => 'Import Many Communities',
    'href' => 'import/import_communities',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Batch import many communities from CSV file. Import Media first.'),
  );

  $items[] = array (
    'title' => 'View Communities',
    'href' => 'communities',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('See all Community Groups'),
  );

  $items[] = array (
    'title' => 'Add One Cultural Protocol',
    'href' => 'node/add/cultural-protocol-group',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Add a Cultural Protocol.'),
  );

  $items[] = array (
    'title' => 'Import Many Cultural Protocols',
    'href' => 'import/import_cultural_protocols',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Batch import many cultural protocols from CSV file.  Import Media first.'),
  );

  $items[] = array (
    'title' => 'View Cultural Protocols',
    'href' => 'cultural-protocols',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('See all Cultural Protocol Groups'),
  );  */

  $content = ['content' => $items];
  $markup .= theme('admin_block_content', $content);

  $block = [
    '#markup' => $markup,
  ];
  return $block;
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_support() {

  $items = [];

  $markup = '';

  $version = ma_core_get_version();
  $items[] = [
    'title' => t($version . ' Release Notes'),
    'href' => 'release-notes',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('Mukurtu Release Notes'),
  ];

  $items[] = [
    'title' => 'Mukurtu Support',
    'href' => 'http://support.mukurtu.org',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('Questions and answers to common issues'),
  ];

  $items[] = [
    'title' => 'Mukurtu Video Channel',
    'href' => 'https://vimeo.com/channels/mukurtucms',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('How Tos and Walkthroughs'),
  ];

  $items[] = [
    'title' => 'Contact Mukurtu',
    'href' => 'http://www.mukurtu.org/',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
  ];

  $content = ['content' => $items];
  $markup = theme('admin_block_content', $content);

  $block = [
    '#markup' => $markup,
  ];
  return $block;
}


/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_user() {

  $items = [];

  $markup = '';

  global $user;

  $items[] = [
    'title' => 'Edit my account',
    'href' => 'user/' . $user->uid . '/edit',
    'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
    'description' => t('Manage your time zone, profile picture and contact settings.'),
  ];

  if (user_access('administer users')) {
    $items[] = [
      'title' => 'Add user',
      'href' => 'admin/people/create',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Add a user to your Mukurtu site.'),
    ];
  }

  if (user_access('administer users')) {
    $items[] = [
      'title' => 'Manage users',
      'href' => 'admin/people',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Manage existing users and allow new users to access your site.'),
    ];
  }

  if (user_access('administer users')) {
    $items[] = [
      'title' => 'Manage user registration',
      'href' => 'admin/config/people/accounts',
      'localized_options' => ['attributes' => ['class' => ['opic-dashboard-content']]],
      'description' => t('Manage how users can register for your site, email notifications, and more.'),
    ];
  }


  $content = ['content' => $items];
  $markup = theme('admin_block_content', $content);

  $block = [
    '#markup' => $markup,
  ];
  return $block;
}

/**
 * Implementation of hook_block_display().
 */
function mukurtu_splash_block_display($block) {
  $GLOBALS['devel_shutdown'] = FALSE; // Prevent devel module from spewing.

  $renderable_block = _block_get_renderable_array(_block_render_blocks([$block]));
  print render($renderable_block);

  exit;
}

/**
 * Helper function to determine if all the tasks related to initial site
 * configuration have either been completed or dismissed. TODO: Create a
 * checklist of completed/dismissed tasks. TODO: Check that list here.
 */
function mukurtu_splash_site_welcome_check() {
  return TRUE;
}

/**
 * Menu callback function to help toggle the demo content module's status.
 */
function mukurtu_splash_toggle_demo_content() {
  drupal_goto('admin/dashboard');
}

/**
 * Implements hook_theme().
 */
function mukurtu_splash_theme($existing, $type, $theme, $path) {
  return [
    'wizard' => [
      'template' => 'wizard',
      'variables' => ['step' => NULL, 'title' => NULL],
    ],
  ];
}

function _render_subscribe_link($entity) {
  global $user;
  $entity_type = 'node';

  $account = clone $user;
  if (!og_is_group($entity_type, $entity)) {
    return;
  }

  if (!empty($entity->uid) && ($entity->uid == $account->uid)) {
    // User is the group manager.
    $element[0] = [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => [
        'title' => t('You are the group manager'),
        'class' => 'group manager',
      ],
      '#value' => t('You are the group manager'),
    ];

    return $element;
  }

  list($id, , $bundle) = entity_extract_ids($entity_type, $entity);
  if (og_is_member($entity_type, $id, 'user', $account, [
    OG_STATE_ACTIVE,
    OG_STATE_PENDING,
  ])) {
    if (og_user_access($entity_type, $id, 'unsubscribe', $account)) {
      $links['title'] = t('Unsubscribe from group');
      $links['href'] = "group/$entity_type/$id/unsubscribe";
      $links['class'] = 'group unsubscribe';
    }
  }
  else {
    if (og_is_member($entity_type, $id, 'user', $account, [OG_STATE_BLOCKED])) {
      // If user is blocked, they should not be able to apply for
      // membership.
      return;
    }

    // Check if user can subscribe to the field.
    if (empty($settings['field_name']) && $audience_field_name = og_get_best_group_audience_field('user', $account, $entity_type, $bundle)) {
      $settings['field_name'] = $audience_field_name;
    }
    if (!$settings['field_name']) {
      return;
    }

    $field_info = field_info_field($settings['field_name']);

    // Check if entity is referencable.
    if ($field_info['settings']['target_type'] != $entity_type) {
      // Group type doesn't match.
      return;
    }
    if (!empty($field_info['settings']['handler_settings']['target_bundles']) && !in_array($bundle, $field_info['settings']['handler_settings']['target_bundles'])) {
      // Bundles don't match.
      return;
    }

    if (!og_check_field_cardinality('user', $account, $settings['field_name'])) {
      $element[0] = [
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#attributes' => [
          'title' => format_plural($field_info['cardinality'], 'You are already registered to another group', 'You are already registered to @count groups'),
          'class' => 'group other',
        ],
        '#value' => format_plural($field_info['cardinality'], 'You are already registered to another group', 'You are already registered to @count groups'),
      ];
      return $element;
    }

    $url = "group/$entity_type/$id/subscribe";
    if ($settings['field_name']) {
      $url .= '/' . $settings['field_name'];
    }

    if (og_user_access($entity_type, $id, 'subscribe without approval', $account)) {
      $links['title'] = t('Subscribe to group');
      $links['class'] = 'group subscribe';
      if ($account->uid) {
        $links['href'] = $url;
      }
      else {
        $links['href'] = 'user/login';
        $links['options'] = ['query' => ['destination' => $url]];
      }
    }
    elseif (og_user_access($entity_type, $id, 'subscribe')) {
      $links['title'] = t('Request group membership');
      $links['class'] = 'group subscribe request';
      if ($account->uid) {
        $links['href'] = $url;
      }
      else {
        $links['href'] = 'user/login';
        $links['options'] = ['query' => ['destination' => $url]];
      }
    }
    else {
      $element[0] = [
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#attributes' => [
          'title' => t('This is a closed group. Only a group administrator can add you.'),
          'class' => 'group closed',
        ],
        '#value' => t('This is a closed group. Only a group administrator can add you.'),
      ];

      return $element;
    }
  }

  if (!empty($links['title'])) {
    $links += [
      'options' => [
        'attributes' => [
          'title' => $links['title'],
          'class' => [$links['class']],
        ],
      ],
    ];
    $element[0] = [
      '#type' => 'link',
      '#title' => $links['title'],
      '#href' => $links['href'],
      '#options' => $links['options'],
    ];
    return $element;
  }
}

/**
 * Render the OG links for a group.
 */
function mukurtu_splash_block_group_links() {
  if (is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if (og_is_group('node', $node)) {
      $result = _render_subscribe_link($node);
    }
    return '<span class="btn">' . render($result) . '</span>';
  }
}

/**
 * Display the wizard block on the top of the dashboard page
 */
function mukurtu_splash_block_wizard() {
  global $user;
  $account = user_load($user->uid);

  // condition if the user has session disabled the wizard
  if (!isset($account->data['disable_wizard']) || $account->data['disable_wizard'] == 1) {
    $attribs = [
      'query' => ['destination' => $_GET['q']],
      'attributes' => ['class' => ['btn', 'btn-default']],
    ];
    return l('Getting Started Guide', 'wizard/toggle', $attribs);
  }

  // need to determine which step of the wizard is active
  $step = 0;

  // logic to determine where we've been loaded and which step to show
  if (arg(2) == 'edit' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    switch ($node->type) {
      case 'community':
        $step = 2;
        break;
      case 'cultural-protocol-group':
        $step = 3;
        break;
      case 'digital-heritage':
        $step = 6;
        break;
    }
  }
  else {
    if (arg(1) == 'add') {
      $type = arg(2);
      switch ($type) {
        case 'community':
          $step = 2;
          break;
        case 'cultural-protocol-group':
          $step = 3;
          break;
        case 'digital-heritage':
          $step = 6;
          break;
      }
    }
    else {
      if (arg(1) == 'dashboard') {
        switch (arg(2)) {
          case 'communities':
            $step = 2;
            break;
        }
      }
    }
  }

  drupal_add_library('system', 'ui.tooltip');
  drupal_add_library('system', 'ui.tabs');

  $title = t('Step @step', ['@step' => $step]);
  $build['wizardelement'] = [
    '#theme' => 'wizard',
    '#title' => $title,
    '#step' => $step,
  ];

  if ($step > 0) {
    drupal_add_js('jQuery(document).ready(function(){jQuery("#tabs").tabs({active:' . $step . '});});', 'inline');
  }
  else {
    drupal_add_js('jQuery(document).ready(function(){jQuery("#tabs").tabs();});', 'inline');
  }

  $output = drupal_render($build);


  return $output;
}

/**
 * Internal book-keeping for pre-release functionality.
 *
 * This is for restricting public facing elements such as dashboard
 * links to things we don't want to expose yet. It is not an actual
 * access control system (e.g., doesn't not enable/disable features).
 */
function ma_splash_prerelease_functionality_enabled($feature) {
  if (defined('MUKURTU_PRERELEASE_FUNCTIONALITY')) {
    $enabled = variable_get(MUKURTU_PRERELEASE_FUNCTIONALITY);
    if (isset($enabled[$feature])) {
      return $enabled[$feature];
    }
  }
  return FALSE;
}
