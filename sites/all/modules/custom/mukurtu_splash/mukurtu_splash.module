<?php
// $Id$
/**
 * @file mukurtu_splash.module
 * Displays a block of configuration links in a Colorbox popup.
 */

/**
 * Implementation of hook_menu().
 */
function mukurtu_splash_menu() {
  $items['splash/%mukurtu_splash_block'] = array(
    'title' => '',
    'page callback' => 'mukurtu_splash_block_display',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  $items['wizard/toggle'] = array(
    'title' => '',
    'page callback' => 'mukurtu_splash_toggle_wizard',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * toggle if the user can see the wizard
 * user variable disable_wizard
 */
function mukurtu_splash_toggle_wizard() {
  global $user;

  $account = user_load($user->uid);

  if (empty($account->data['disable_wizard']) || $account->data['disable_wizard'] == 0) {
    $edit = array('data' => array('disable_wizard' => 1));
  } else {
    $edit = array('data' => array('disable_wizard' => 0));
  }

  user_save($account, $edit);

  if (isset($_GET['destination'])) {
    drupal_goto($_GET['destination']);
  } else {
    drupal_goto('dashboard');
  }
}


/**
 * Implementation of hook_init().
 */
function mukurtu_splash_init() {
  drupal_add_js(drupal_get_path('module', 'mukurtu_splash') . '/mukurtu_splash.js');

  drupal_add_css( drupal_get_path('module', 'mukurtu_splash') . '/mukurtu_splash.css');

  // Logged out users
/*
  if(drupal_is_front_page()
      && !user_access('administer site configuration')
      && !isset($_COOKIE['prealpha_seen'])
      && !user_is_logged_in()
      ){

    setcookie('prealpha_seen', "seen", time + 3600 * 24 * 180);

    $url = url('splash/site_prealpha');

    $js = 'jQuery(document).ready(function () { jQuery.colorbox({ ';
    $js .= 'href: "' . $url . '",';
    $js .= 'width: 800,';
    $js .= 'height: 550,';
    $js .= 'opacity: .6,';
    $js .= '});});';

    drupal_add_js(drupal_get_path('module', 'mukurtu_splash') . '/mukurtu_splash.js');
    drupal_add_js($js, array('type' => 'inline', 'group' => JS_THEME, 'every_page' => TRUE));
  }
*/



  // Admin splash screens.

  // Config Site
/*
  if (drupal_is_front_page()
      && user_access('administer site configuration')

      && !variable_get('mukurtu_splash_config_seen', FALSE)
      ) {

    variable_set('mukurtu_splash_config_seen', TRUE);

    $url = url('splash/site_config');

    $js = 'jQuery(document).ready(function () { jQuery.colorbox({ ';
    $js .= 'href: "' . $url . '",';
    $js .= 'width: 800,';
    $js .= 'height: 480,';
    $js .= 'opacity: .6,';
    $js .= '});});';

    drupal_add_js(drupal_get_path('module', 'mukurtu_splash') . '/mukurtu_splash.js');
    drupal_add_js($js, array('type' => 'inline', 'group' => JS_THEME, 'every_page' => TRUE));
  }
*/
/*

  // Site configured admin welcome screen
  if (drupal_is_front_page()
      && user_access('administer site configuration')
      && !variable_get('mukurtu_splash_welcome_seen', FALSE)
      ) {

    $url = url('splash/site_welcome');

    $js = 'jQuery(document).ready(function () { jQuery.colorbox({ ';
    $js .= 'href: "' . $url . '",';
    $js .= 'width: 600,';
    $js .= 'height: 400,';
    $js .= 'opacity: .6,';
    $js .= '});});';
    drupal_add_js(drupal_get_path('module', 'mukurtu_splash') . '/mukurtu_splash.js');
    drupal_add_js($js, array('type' => 'inline', 'group' => JS_THEME, 'every_page' => TRUE));

    // This makes it so that the splash page will never show up again, unless
    // this variable is set back to FALSE.
    variable_set('mukurtu_splash_welcome_seen', TRUE);
  }

  $mod_uri = drupal_get_path('module', 'mukurtu_splash');
  drupal_add_css( $mod_uri . '/mukurtu_splash.css');
*/
}

/**
 * Implementation of hook_block_info().
 */
function mukurtu_splash_block_info() {
  $blocks['site_welcome'] = array(
    'info' => t('Welcome message splash screen'),
  );

  $blocks['site_prealpha'] = array(
    'info' => t('Alpha Site Notice'),
  );
  $blocks['site_start'] = array(
    'info' => t('Mukurtu Dashboard: Site Start'),
  );
  $blocks['demo_config'] = array(
    'info' => t('Mukurtu Dashboard: Add Demo Content'),
  );
  $blocks['site_config'] = array(
    'info' => t('Mukurtu Dashboard: Configure Mukurtu'),
  );
  $blocks['batch_import'] = array(
    'info' => t('Mukurtu Dashboard: Import Content'),
  );
  $blocks['manage_content'] = array(
    'info' => t('Mukurtu Dashboard: Manage Content'),
  );
  $blocks['manage_taxonomy'] = array(
    'info' => t('Mukurtu Dashboard: Manage Categories & Keywords'),
  );
  $blocks['manage_community'] = array(
    'info' => t('Mukurtu Dashboard: Manage Communities'),
  );
  $blocks['support'] = array(
    'info' => t('Mukurtu Dashboard: Support'),
  );
  $blocks['user'] = array(
    'info' => t('Mukurtu Dashboard: User'),
  );

  $blocks['mukurtu_wizard'] = array(
    'info' => t('Mukurtu Dashboard: Wizard'),
  );

  $blocks['mukurtu_group_management'] = array(
    'info' => t('Mukurtu Group Management Links'),
  );
  return $blocks;
}


/**
 * Implementation of hook_block_view().
 */
function mukurtu_splash_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'site_welcome':
      $block['subject'] = t('You have successfully installed Mukurtu.');
      $block['content'] = mukurtu_splash_block_site_welcome();
      break;
    case 'site_prealpha':
/*       $block['subject'] = '<h1>' .t('Alpha!') . '</h1>'; */
      $block['content'] = mukurtu_splash_block_site_prealpha();
      break;
    case 'site_start':
      $block['subject'] = t('Set up Site');
      $block['content'] = mukurtu_splash_block_site_start();
      break;
    case 'demo_config':
      $block['subject'] = t('Mukurtu Demo Content');
      $block['content'] = mukurtu_splash_block_demo_config();
      break;
    case 'site_config':
      $block['subject'] = t('Mukurtu Configuration');
      $block['content'] = mukurtu_splash_block_site_config();
      break;
    case 'batch_import':
      $block['subject'] = t('Batch Import Content');
      $block['content'] = mukurtu_splash_block_batch_import();
      break;
    case 'manage_content':
      $block['subject'] = t('Content and Collections');
      $block['content'] = mukurtu_splash_block_manage_content();
      break;
    case 'manage_taxonomy':
      $block['subject'] = t('Categories & Keywords');
      $block['content'] = mukurtu_splash_block_manage_taxonomy();
      break;
    case 'manage_community':
      $block['subject'] = t('Communities and Protocols');
      $block['content'] = mukurtu_splash_block_manage_community();
      break;
    case 'support':
      $block['subject'] = t('Support');
      $block['content'] = mukurtu_splash_block_support();
      break;
    case 'user':
      $block['subject'] = t('Site Users');
      $block['content'] = mukurtu_splash_block_user();
      break;
    case 'mukurtu_wizard':
      $block['subject'] = t('Wizard');
      $block['content'] = mukurtu_splash_block_wizard();
      break;
    case 'mukurtu_group_management':
      $block['subject'] = t('Group Management Links');
      $block['content'] = mukurtu_splash_block_group_links();
      break;
  }
  return $block;
}

/**
 * Loader function for hook_menu().
 */
function mukurtu_splash_block_load($delta) {
  return block_load('mukurtu_splash', $delta);
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_site_prealpha() {

  $output = '<h1>' . variable_get('mukurtu_city_name','Mukurtu') . '</h1>';
  $output .= '<img src="' . base_path() . path_to_theme() . '/images/mukurtu_alpha.png" alt="Mukurtu Alpha" />';
  $output .= '<p>' . t('This is a new site, we are understanding how best to make the site useful to you.') . '</p>';
  $output .= '<p>' . t('We are inviting folks to test the site and add information to it. [Link]');

  $block = array(
    '#markup' => $output,
  );
  return $block;

}
/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_site_welcome() {
  $markup = '';
  $markup .= '<p><strong>'. t('Next:') . '</strong>' . t('Setup your site. Go to the !dashboard.', array('!dashboard' => l(t('Dashboard'), 'admin/dashboard', array('attributes' => array('class' => array('mukurtu-splash-link')))))) . '</p>';
/*   $markup .= '<p>' . t('Tell us what you think, or better yet, !contribute to make it even better.', array('!contribute' => l(t('contribute to Mukurtu'), 'http://mukurtu.org/'))) . '</p>'; */

  $block = array(
    '#markup' => $markup,
  );
  return $block;
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_site_start() {

  $items = array();
  $items_layout = array();

  $markup = '';

  if (user_access('administer site configuration')) {
    $items[] = array(
      'title' => 'Change site name, slogan and email address.',
      'href' => 'admin/config/system/site-information',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Shortcut to page where you can change some settings for this site. The site name, a slogan for your site, and the email address for the site administrator.'),
    );
  }

  if (user_access('administer themes')) {
    $items[] = array (
      'title' => 'Change Logo',
      'href' => 'admin/appearance/settings/mukurtu_starter',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Shortcut to theme settings where you can change your logo.'),
    );
  }

  $items[] = array (
    'title' => 'View & Edit About page',
    'href' => 'about',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Mukurtu comes with a default about page that you can edit.'),
  );


  if (user_access('administer menu')) {
    $items[] = array(
      'title' => 'Enable and disable extra menu items',
      'href' => 'admin/structure/menu/manage/menu-browse-menu',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Mukurtu comes with additional pages that you can enable.'),
    );
  }

  if (user_access('edit boxes')) {
    $items_layout[] = array(
      'title' => 'Edit Custom Site Header',
      'href' => 'admin/structure/block/manage/boxes/ma_site_header/configure',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Edit HTML markup of Custom Site Header'),
    );

    $items_layout[] = array(
      'title' => 'Edit Custom Site Footer',
      'href' => 'admin/structure/block/manage/boxes/ma_site_footer/configure',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Edit HTML markup of Custom Site Footer'),
    );
  }


  // remove the block if it's empty
  if (sizeof($items) < 2) {
    return;
  }

  $content = array ('content' => $items);
  $markup .= theme('admin_block_content', $content);

  $markup .= '<strong>Layout and Design</strong>';
  $content = array ('content' => $items_layout);
  $markup .= theme('admin_block_content', $content);

  $block = array(
    '#markup' => $markup,
  );
  return $block;
}


/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_site_config() {

  $items = array();

  $markup = '';

  $items[] = array (
    'title' => 'Configure Google Analytics',
    'href' => 'admin/config/system/googleanalytics',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('You will need to create a Google Analytics account and then configure Google Analytics on this site.'),
  );

  $items[] = array (
    'title' => 'Configure Mollom',
    'href' => 'admin/config/content/mollom/settings',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Mollom is a content moderation web service used to filter out spam and malicious content.  Requires a Mollom account.'),
  );

  $items[] = array (
    'title' => 'Rebuild Site Permissions',
    'href' => 'admin/reports/status/rebuild',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('If doing a lot of site content editing, you may need to rebuild permissions to make sure that access permissions remain set correctly.'),
  );
  
  $content = array ('content' => $items);
  $markup = theme('admin_block_content', $content);

  $block = array(
    '#markup' => $markup,
  );
  return $block;
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_manage_content() {

  $items = array();

  $markup = '';

  if (node_access('create','digital_heritage')) {
    $items[] = array(
      'title' => 'Add a Digital Heritage item',
      'href' => 'node/add/digital-heritage',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Add a Digital Hertiage Item.'),
    );
  }

  if (node_access('create','collection')) {
    $items[] = array(
      'title' => 'Create a Collection',
      'href' => 'node/add/collection',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Create a collection of digital heritage.'),
    );
  }

  if (user_access('access content overview')) {
    $items[] = array(
      'title' => 'Manage Content',
      'href' => 'admin/content',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('View all content on the site'),
    );
  }


  if (user_access('administer scald atoms')) {
    $items[] = array(
      'title' => 'View Media',
      'href' => 'admin/content/atoms',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('View all media assets.'),
    );
  }

  if (scald_atom_add_access()) {
    $items[] = array(
      'title' => 'Add Media',
      'href' => 'atom/add',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Add new media files.'),
    );
  }

  if (user_access('access administration pages')) {
    $items[] = array(
      'title' => 'List of Indexed Fields',
      'href' => 'indexed-fields',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('List of fields that will return results if their contents match user searches.'),
    );
  }


  $content = array ('content' => $items);
  $markup = theme('admin_block_content', $content);

  $block = array(
    '#markup' => $markup,
  );
  return $block;
}


/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_batch_import() {

  $items = array();

  $markup = '';

  if (feeds_access('import','digital_heritage_metadata')) {
    $items[] = array(
      'title' => 'Import Digital Heritage Metadata',
      'href' => 'import/digital_heritage_metadata',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Batch import many digital heritage items from CSV file. If the media assets have associated metadata, import the media files first using the media importers.'),
    );
  }

  if (feeds_access('import','import_media_images')) {
    $items[] = array(
      'title' => 'Import Images',
      'href' => 'import/import_media_images',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Batch import images and associated metadata from CSV file.'),
    );
  }

  if (feeds_access('import','import_media_audio')) {
    $items[] = array(
      'title' => 'Import Audio',
      'href' => 'import/import_media_audio',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Batch import audio files and associated metadata from CSV file.'),
    );
  }

  if (feeds_access('import','import_media_video')) {
    $items[] = array(
      'title' => 'Import Video',
      'href' => 'import/import_media_video',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Batch import video files and associated metadata from CSV file.'),
    );
  }

  if (feeds_access('import','import_media_files')) {
    $items[] = array(
      'title' => 'Import Files',
      'href' => 'import/import_media_files',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Batch import files and associated metadata from CSV file.'),
    );
  }

  $content = array ('content' => $items);
  $markup = theme('admin_block_content', $content);
  
  $block = array(
    '#markup' => $markup,
  );
  return $block;
}


/**
 * Manage categories and keywords
 *
 * @return array
 * @throws Exception
 */
function mukurtu_splash_block_manage_taxonomy() {
  $items = array();

  $markup = '';

  global $user;

  $vocabulary = taxonomy_vocabulary_machine_name_load ('category');
  if (user_access('edit terms in '. $vocabulary->vid)) {
    $items[] = array(
      'title' => 'Add One Category',
      'href' => 'admin/structure/taxonomy/category/add',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Add a category'),
    );

    $items[] = array(
      'title' => 'Manage Categories',
      'href' => 'admin/structure/taxonomy/category',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Manage all categories'),
    );
  }

  if (feeds_access('import','import_categories')) {
    $items[] = array (
      'title' => 'Import Many Categories',
      'href' => 'import/import_categories',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Batch import many categories from CSV file. Import Media first.'),
    );
  }

  $vocabulary = taxonomy_vocabulary_machine_name_load ('tags');
  if (user_access('edit terms in '. $vocabulary->vid)) {
    $items[] = array(
      'title' => 'Add One Keyword',
      'href' => 'admin/structure/taxonomy/tags/add',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Add a Keyword'),
    );

    $items[] = array(
      'title' => 'Manage Keywords',
      'href' => 'admin/structure/taxonomy/tags',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Manage all keywords'),
    );
  }

  $content = array ('content' => $items);
  $markup = theme('admin_block_content', $content);

  $block = array(
    '#markup' => $markup,
  );
  return $block;
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_demo_config() {

  $items = array();

  $markup = '';

  $items[] = array (
    'title' => 'Download Sample Content',
    'href' => 'https://github.com/codamatic/mukurtu-demo-content/zipball/master',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('100MB of Demo Content. Download from Github: https://github.com/codamatic/mukurtu-demo-content'),
  );

  $items[] = array (
    'title' => '1. Add Media',
    'href' => 'file/add',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Batch add media files.'),
  );

  $items[] = array (
    'title' => '2. Import Many Cultural Protocols',
    'href' => 'import/import_cultural_protocols',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Batch import many cultural protocols from CSV file.  Import Media first.'),
  );

  $items[] = array (
    'title' => '3. Import Many Communities',
    'href' => 'import/import_communities',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Batch import many communities from CSV file. Import Media first.'),
  );

  $items[] = array (
    'title' => '4. Add Many Users',
    'href' => 'import/import_users',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Batch import many users from CSV file'),
  );

  $items[] = array (
    'title' => '5. Import Many Categories',
    'href' => 'import/import_categories',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Batch import many categories from CSV file. Import Media first.'),
  );

  $items[] = array (
    'title' => '6. Import Digital Heritage Metadata',
    'href' => 'import/digital_heritage_metadata',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Batch import many digital heritage items from CSV file. Import Media first.'),
  );

  $content = array ('content' => $items);
  $markup = theme('admin_block_content', $content);

  $block = array(
    '#markup' => $markup,
  );
  return $block;
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_manage_community() {

  $items = array();

  $markup = '';

  //$markup .= l('Help','admin/dashboard',array('attributes' => array('title'=>'Help content for managing communities', 'id' => 'help-icon-community', 'class' => array('jquery-ui-tooltip'))));


  $items[] = array (
    'title' => 'Manage Communities and Protocols',
    'href' => 'dashboard/communities',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Add/edit Communities'),
  );

  if (node_access('create','community')) {
    $items[] = array (
      'title' => 'Create Community',
      'href' => 'node/add/community',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Add Communities'),
    );
  }

  if (node_access('create','cultural_protocol_group')) {
    $items[] = array(
      'title' => 'Create Cultural Protocol',
      'href' => 'node/add/cultural-protocol-group',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Add Protocols'),
    );
  }

  /*if (feeds_access('import','import_cultural_protocols')) {
    $items[] = array(
      'title' => 'Import Cultural Protocols',
      'href' => 'import/import_cultural_protocols',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Import many Cultural Protocols'),
    );
  }*/



  /*
  $items[] = array (
    'title' => 'View Users',
    'href' => 'admin/people',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('View people with accounts.'),
  );

  $items[] = array (
    'title' => 'Add User',
    'href' => 'admin/people/create',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Create an account for a user.'),
  );
  $items[] = array (
    'title' => 'Add Many Users',
    'href' => 'import/import_users',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Batch import many users from CSV file'),
  );

  $items[] = array (
    'title' => 'View All Groups',
    'href' => 'group-list',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('View all groups'),
  );



  $items[] = array (
    'title' => 'Add One Community',
    'href' => 'node/add/community',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Add a Community'),
  );

  $items[] = array (
    'title' => 'Import Many Communities',
    'href' => 'import/import_communities',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Batch import many communities from CSV file. Import Media first.'),
  );

  $items[] = array (
    'title' => 'View Communities',
    'href' => 'communities',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('See all Community Groups'),
  );

  $items[] = array (
    'title' => 'Add One Cultural Protocol',
    'href' => 'node/add/cultural-protocol-group',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Add a Cultural Protocol.'),
  );

  $items[] = array (
    'title' => 'Import Many Cultural Protocols',
    'href' => 'import/import_cultural_protocols',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Batch import many cultural protocols from CSV file.  Import Media first.'),
  );

  $items[] = array (
    'title' => 'View Cultural Protocols',
    'href' => 'cultural-protocols',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('See all Cultural Protocol Groups'),
  );  */

  $content = array ('content' => $items);
  $markup .= theme('admin_block_content', $content);

  $block = array(
    '#markup' => $markup,
  );
  return $block;
}

/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_support() {

  $items = array();

  $markup = '';

  $version = ma_core_get_version();
  $items[] = array (
    'title' => t($version . ' Release Notes'),
    'href' => 'release-notes',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Mukurtu Release Notes'),
  );

  $items[] = array (
    'title' => 'Mukurtu Support',
    'href' => 'http://support.mukurtu.org',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Questions and answers to common issues'),
  );

  $items[] = array (
    'title' => 'Mukurtu Video Channel',
    'href' => 'https://vimeo.com/channels/mukurtucms',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('How Tos and Walkthroughs'),
  );

  $items[] = array (
    'title' => 'Contact Mukurtu',
    'href' => 'http://www.mukurtu.org/',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
  );

  $content = array ('content' => $items);
  $markup = theme('admin_block_content', $content);

  $block = array(
    '#markup' => $markup,
  );
  return $block;
}


/**
 * Helper function to assemble the initial site configuration block.
 */
function mukurtu_splash_block_user() {

  $items = array();

  $markup = '';

  global $user;

  $items[] = array (
    'title' => 'Edit my account',
    'href' => 'user/' . $user->uid . '/edit',
    'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
    'description' => t('Manage your time zone, profile picture and contact settings.'),
  );

  if (user_access('administer users')) {
    $items[] = array(
      'title' => 'Add user',
      'href' => 'admin/people/create',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Add a user to your Mukurtu site.'),
    );
  }

  if (user_access('administer users')) {
    $items[] = array(
      'title' => 'Manage users',
      'href' => 'admin/people',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Manage existing users and allow new users to access your site.'),
    );
  }

  if (user_access('administer users')) {
    $items[] = array(
      'title' => 'Manage user registration',
      'href' => 'admin/config/people/accounts',
      'localized_options' => array('attributes' => array('class' => array('opic-dashboard-content'))),
      'description' => t('Manage how users can register for your site, email notifications, and more.'),
    );
  }


  $content = array ('content' => $items);
  $markup = theme('admin_block_content', $content);

  $block = array(
    '#markup' => $markup,
  );
  return $block;
}

/**
 * Implementation of hook_block_display().
 */
function mukurtu_splash_block_display($block) {
  $GLOBALS['devel_shutdown'] = FALSE; // Prevent devel module from spewing.

  $renderable_block = _block_get_renderable_array(_block_render_blocks(array($block)));
  print render($renderable_block);

  exit;
}

/**
 * Helper function to determine if all the tasks related to initial site configuration
 * have either been completed or dismissed.
 * TODO: Create a checklist of completed/dismissed tasks.
 * TODO: Check that list here.
 */
function mukurtu_splash_site_welcome_check() {
  return TRUE;
}

/**
 * Menu callback function to help toggle the demo content module's status.
 */
function mukurtu_splash_toggle_demo_content() {
  drupal_goto('admin/dashboard');
}

/**
 * Implements hook_theme().
 */
function mukurtu_splash_theme($existing, $type, $theme, $path) {
  return array (
    'wizard' => array(
      'template' => 'wizard',
      'variables' => array('step' => NULL, 'title' => NULL),
    ),
  );
}

function _render_subscribe_link($entity) {
  global $user;
  $entity_type = 'node';

  $account = clone $user;
  if (!og_is_group($entity_type, $entity)) {
    return;
  }

  if (!empty($entity->uid) && ($entity->uid == $account->uid)) {
    // User is the group manager.
    $element[0] = array(
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => array('title' => t('You are the group manager'), 'class' => 'group manager'),
      '#value' => t('You are the group manager'),
    );

    return $element;
  }

  list($id,, $bundle) = entity_extract_ids($entity_type, $entity);
  if (og_is_member($entity_type, $id, 'user', $account, array(OG_STATE_ACTIVE, OG_STATE_PENDING))) {
    if (og_user_access($entity_type, $id, 'unsubscribe', $account)) {
      $links['title'] = t('Unsubscribe from group');
      $links['href'] = "group/$entity_type/$id/unsubscribe";
      $links['class'] = 'group unsubscribe';
    }
  }
  else {
    if (og_is_member($entity_type, $id, 'user', $account, array(OG_STATE_BLOCKED))) {
      // If user is blocked, they should not be able to apply for
      // membership.
      return;
    }

    // Check if user can subscribe to the field.
    if (empty($settings['field_name']) && $audience_field_name = og_get_best_group_audience_field('user', $account, $entity_type, $bundle)) {
      $settings['field_name'] = $audience_field_name;
    }
    if (!$settings['field_name']) {
      return;
    }

    $field_info = field_info_field($settings['field_name']);

    // Check if entity is referencable.
    if ($field_info['settings']['target_type'] != $entity_type) {
      // Group type doesn't match.
      return;
    }
    if (!empty($field_info['settings']['handler_settings']['target_bundles']) && !in_array($bundle, $field_info['settings']['handler_settings']['target_bundles'])) {
      // Bundles don't match.
      return;
    }

    if (!og_check_field_cardinality('user', $account, $settings['field_name'])) {
      $element[0] = array(
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#attributes' => array('title' => format_plural($field_info['cardinality'], 'You are already registered to another group', 'You are already registered to @count groups'), 'class' => 'group other'),
        '#value' => format_plural($field_info['cardinality'], 'You are already registered to another group', 'You are already registered to @count groups'),
      );
      return $element;
    }

    $url = "group/$entity_type/$id/subscribe";
    if ($settings['field_name']) {
      $url .= '/' . $settings['field_name'];
    }

    if (og_user_access($entity_type, $id, 'subscribe without approval', $account)) {
      $links['title'] = t('Subscribe to group');
      $links['class'] = 'group subscribe';
      if ($account->uid) {
        $links['href'] = $url;
      }
      else {
        $links['href'] = 'user/login';
        $links['options'] = array('query' => array('destination' => $url));
      }
    }
    elseif (og_user_access($entity_type, $id, 'subscribe')) {
      $links['title'] = t('Request group membership');
      $links['class'] = 'group subscribe request';
      if ($account->uid) {
        $links['href'] = $url;
      }
      else {
        $links['href'] = 'user/login';
        $links['options'] = array('query' => array('destination' => $url));
      }
    }
    else {
      $element[0] = array(
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#attributes' => array('title' => t('This is a closed group. Only a group administrator can add you.'), 'class' => 'group closed'),
        '#value' => t('This is a closed group. Only a group administrator can add you.'),
      );

      return $element;
    }
  }

  if (!empty($links['title'])) {
    $links += array('options' => array('attributes' => array('title' => $links['title'], 'class' => array($links['class']))));
    $element[0] = array(
      '#type' => 'link',
      '#title' => $links['title'],
      '#href' => $links['href'],
      '#options' => $links['options'],
    );
    return $element;
  }
}

function mukurtu_splash_block_group_links() {
  // links to manage the current group
  $links = "";

  $nid = arg(1);  // load group nid from url

  if (is_numeric($nid)) {

    $node = node_load($nid);

    $result = _render_subscribe_link($node);
    $result[0]['#attributes']['class'] = 'btn';
    $subcribe_link_content = render($result);

    $links .= $subcribe_link_content;

    // confirm permission to create DH items
    if (og_user_access('node',$node->nid,'create digital_heritage content')) {
      $link_url = 'node/add/digital-heritage';

      if ($node->type == 'community') {
        $link_url .= '/'.$node->nid;
      } else if ($node->type == 'cultural_protocol_group') {
        $link_url .= '/'.$node->og_group_ref['und'][0]['target_id'].'/'.$node->nid;
      }

      $links .= l('Create Digital Heritage Content >>', $link_url, array('attributes'=>array('class'=>array('btn'))));
    }

    // confirm permission to create protocols
    if ($node->type == 'community' && og_user_access('node',$node->nid,'create cultural_protocol_group content')) {

      $links .= l('Create Cultural Protocol >>', 'node/add/cultural-protocol-group', array('attributes'=>array('class'=>array('btn')), 'query' => array('og_group_ref' => $node->nid)));
    }
  }

  $markup = $links;

  $block = array(
    '#markup' => $markup,
  );
  return $block;
}

/**
 * Display the wizard block on the top of the dashboard page
 */
function mukurtu_splash_block_wizard() {
  global $user;
  $account = user_load($user->uid);

  // condition if the user has session disabled the wizard
  if (isset($account->data['disable_wizard']) && $account->data['disable_wizard'] == 0) {
    $attribs = array('query'=>array('destination'=>$_GET['q']), 'attributes' => array('class' => array('btn','btn-default')));
    return l('Show Wizard', 'wizard/toggle', $attribs);
    //return;
  }

  // need to determine which step of the wizard is active
  $step = 0;

  // logic to determine where we've been loaded and which step to show
  if (arg(2) == 'edit' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    switch ($node->type) {
      case 'community':
        $step = 2;
        break;
      case 'cultural-protocol-group':
        $step = 3;
        break;
      case 'digital-heritage':
        $step = 5;
        break;
    }
  } else if (arg(1) == 'add') {
    $type = arg(2);
    switch ($type) {
      case 'community':
        $step = 2;
        break;
      case 'cultural-protocol-group':
        $step = 3;
        break;
      case 'digital-heritage':
        $step = 5;
        break;
    }
  } else if (arg(1) == 'dashboard') {
    switch (arg(2)) {
      case 'communities':
        $step = 2;
        break;
    }
  }

  drupal_add_library('system', 'ui.tooltip');
  drupal_add_library('system' , 'ui.tabs');

  $title = t('Step @step', array('@step' => $step));
  $build['wizardelement'] = array(
    '#theme' => 'wizard',
    '#title' => $title,
    '#step' => $step,
  );

  if ($step > 0) {
    drupal_add_js ( 'jQuery(document).ready(function(){jQuery("#tabs").tabs({active:'.$step.'});});' , 'inline' );
  } else {
    drupal_add_js ( 'jQuery(document).ready(function(){jQuery("#tabs").tabs();});' , 'inline' );
  }

  $output = drupal_render($build);


  return $output;
}
