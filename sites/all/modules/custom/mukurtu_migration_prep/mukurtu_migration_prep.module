<?php

define("MUKURTU_MIGRATION_REPORT_STATUS_NOT_RUN", 0);
define("MUKURTU_MIGRATION_REPORT_STATUS_OK", 1);
define("MUKURTU_MIGRATION_REPORT_STATUS_WARNING", 2);
define("MUKURTU_MIGRATION_REPORT_STATUS_ERROR", 3);

define("MUKURTU_MIGRATION_RESULT", 'result');
define("MUKURTU_MIGRATION_CONTEXT", 'context');
define("MUKURTU_MIGRATION_SUMMARY", 'summary');


/**
 * Implements hook_menu().
 */
function mukurtu_migration_prep_menu() {
  $items = [];

  $items['admin/reports/migration/summary'] = [
    'title' => 'Pre-migration Summary Report',
    'description' => 'View a report on nodes with empty field_protocols.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['mukurtu_migration_prep_summary_report_form'],
    'access callback' => 'mukurtu_migration_prep_current_user_has_role',
    'access arguments' => [['administrator', 'Mukurtu Administrator']],
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Implements hook_views_api().
 */
function mukurtu_migration_prep_views_api() {
  return [
    'api' => '3.0',
  ];
}

/**
 * Implements hook_views_default_views().
 */
function mukurtu_migration_prep_views_default_views() {
  $views = [];
  $path = drupal_get_path('module', 'mukurtu_migration_prep') . '/views/*.inc';

  foreach (glob($path) as $file) {
    require_once $file;
    $views[$view->name] = $view;
    unset($view);
  }

  return $views;
}

function mukurtu_migration_prep_query_alter($query) {
  if ($query->hasAllTags('views_content_with_missing_cultural_protocols')) {
    $count_protocol_refs_subquery = "(SELECT count(*) from og_membership as `ogm` where node.nid = ogm.etid AND ogm.entity_type = 'node' AND ogm.field_name = 'og_group_ref' AND ogm.state = 1)";
    $query->addExpression($count_protocol_refs_subquery, 'protocol_refs');
    $query->havingCondition('protocol_refs', 0);
//    dpm((string) $query);
//    dpm($query->arguments());
  }

}

/**
 * Access function for the form.
 */
function mukurtu_migration_prep_current_user_has_role($roles) {
  if (user_is_logged_in()) {
    global $user;

    foreach ($roles as $role) {
      if (in_array($role, $user->roles)) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Form builder: Builds the migration summary report form.
 */
function mukurtu_migration_prep_summary_report_form($form, &$form_state) {
  $header = [
    'step' => t('Step'),
    'description' => t('Description'),
    'status' => t('Status'),
  ];

  $rows = [];
  $rows[] = mukurtu_migration_prep_report_unsupported_text_formats();
  $rows[] = mukurtu_migration_prep_report_nodes_empty_protocols();
  $rows[] = mukurtu_migration_prep_report_scald_atoms_empty_protocols();
  $rows[] = mukurtu_migration_prep_report_dictionary_words_with_additional_media();
  $rows[] = mukurtu_migration_prep_report_dailymotion_atoms();
  $rows[] = mukurtu_migration_prep_report_scald_authors();

  $form['table'] = [
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => '',
    '#attributes' => ['class' => ['system-status-report']],
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Run Pre-migration Report'),
  ];

  return $form;
}

function mukurtu_migration_prep_get_status_class($status) {
  switch ($status) {
    case MUKURTU_MIGRATION_REPORT_STATUS_OK:
      return ['ok'];
    case MUKURTU_MIGRATION_REPORT_STATUS_WARNING:
      return ['warning'];
    case MUKURTU_MIGRATION_REPORT_STATUS_ERROR:
      return ['error'];
    default:
      return [];
  }
}

function mukurtu_migration_prep_summary_report_form_submit($form, &$form_state) {
  batch_set(mukurtu_migration_prep_batch());
}

/**
 * Define batch process to run all reports.
 */
function mukurtu_migration_prep_batch() {
  return [
    'title' => t('Searching for content using markdown or ds_code filter formats...'),
    'operations' => [
      ['mukurtu_migration_prep_report_unsupported_text_formats_batch_process', []],
    ],
    'finished' => 'mukurtu_migration_prep_report_unsupported_text_formats_batch_finished',
  ];
}

/**
 * Report for markdown/ds_code text formats.
 */
function mukurtu_migration_prep_report_unsupported_text_formats() {
  $previous_run = variable_get('mukurtu_migration_prep_report_unsupported_text_formats') ?? NULL;
  $status = $previous_run[MUKURTU_MIGRATION_RESULT] ?? MUKURTU_MIGRATION_REPORT_STATUS_NOT_RUN;
  $summary = $previous_run[MUKURTU_MIGRATION_SUMMARY] ?? '';

  $row = [
    'data' => [
      t('Text Formats'),
      t('Text formats "Markdown" and "Display Suite code" are not supported by default in Mukurtu CMS v4 and will not be migrated.'),
      $summary,
    ],
    'class' => mukurtu_migration_prep_get_status_class($status),
  ];
  return $row;
}

/**
 * Batch process callback for the markdown/ds_code text format report.
 */
function mukurtu_migration_prep_report_unsupported_text_formats_batch_process(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = db_query("SELECT COUNT(nid) FROM {node}")->fetchField();
    $context['results']['nids'] = [];

    // Load all text and text_long field instances.
    $context['sandbox']['text_fields'] = ['field_data_body' => 'body'];

    $field_types = ['text', 'text_long'];
    $all_fields = field_info_fields();
    foreach ($all_fields as $field_name => $field_info) {
      if (in_array($field_info['type'], $field_types)) {
        $table_name = 'field_data_' . $field_name;
        $context['sandbox']['text_fields'][$table_name] = $field_name;
      }
    }
  }

  $unique_nids = [];

  // Loop through text fields and find nodes with the markdown format.
  foreach ($context['sandbox']['text_fields'] as $table_name => $field_name) {
    $format_column_name = $field_name . '_format';

    $query = db_select($table_name, 'f')
      ->fields('f', ['entity_id'])
      ->condition($format_column_name, ['markdown', 'ds_code'], 'IN')
      ->range(0, 50);

    $result = $query->execute();

    foreach ($result as $row) {
      $unique_nids[$row->entity_id] = true;
    }
  }

  $context['results']['nids'] = array_keys($unique_nids);
  $context['sandbox']['progress'] += count($unique_nids);

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Batch 'finished' callback for the markdown/ds_code text format report.
 */
function mukurtu_migration_prep_report_unsupported_text_formats_batch_finished($success, $results, $operations) {
  if ($success) {
    $report_result = empty($results['nids']) ? MUKURTU_MIGRATION_REPORT_STATUS_OK : MUKURTU_MIGRATION_REPORT_STATUS_ERROR;

    sort($results['nids'], SORT_NUMERIC);
    $summary = t('There are no nodes using these text formats.');
    if ($report_result == MUKURTU_MIGRATION_REPORT_STATUS_ERROR) {
      $ids_msg = implode(', ', $results['nids']);
      $summary = t('There are @count nodes with these text formats: @ids.', ['@count' => count($results['nids']), '@ids' => $ids_msg]);
    }

    $report = [
      MUKURTU_MIGRATION_CONTEXT => $results['nids'],
      MUKURTU_MIGRATION_RESULT => $report_result,
      MUKURTU_MIGRATION_SUMMARY => $summary,
    ];
    variable_set('mukurtu_migration_prep_report_unsupported_text_formats', $report);
    //drupal_set_message(t('Found nodes with markdown filter format: @nids', ['@nids' => implode(', ', $results['nids'])]));
  }
  else {
    drupal_set_message(t('An unknown error occurred'), 'error');
  }
}

/**
 * Report for nodes with empty protocol fields.
 */
function mukurtu_migration_prep_report_nodes_empty_protocols() {
  $result = views_get_view_result('content_with_missing_cultural_protocols');
  $status = empty($result) ? MUKURTU_MIGRATION_REPORT_STATUS_OK : MUKURTU_MIGRATION_REPORT_STATUS_ERROR;
  $link = l(t('Details'), 'admin/reports/migration/content-with-missing-cultural-protocols');
  $summary = $status == MUKURTU_MIGRATION_REPORT_STATUS_OK ? t('All content has cultural protocols') : t('@count items(s) with missing cultural protocols: ', ['@count' => count($result)]) . $link;

  $row = [
    'data' => [
      t('Content (nodes) with no assigned protocols'),
      t('In Mukurtu CMS v4, cultural protocols are now required for all content types.'),
      $summary,
    ],
    'class' => mukurtu_migration_prep_get_status_class($status),
  ];
  return $row;
}

/**
 * Report for scald atoms with empty protocol fields.
 */
function mukurtu_migration_prep_report_scald_atoms_empty_protocols() {
  $result = views_get_view_result('migration_scald_atoms_with_missing_cultural_protocols');
  $status = empty($result) ? MUKURTU_MIGRATION_REPORT_STATUS_OK : MUKURTU_MIGRATION_REPORT_STATUS_ERROR;
  $link = l(t('Details'), 'admin/reports/migration/summary/scald-atoms-with-missing-cultural-protocols');
  $summary = $status == MUKURTU_MIGRATION_REPORT_STATUS_OK ? t('All Scald Atoms have cultural protocols') : t('@count atom(s) with missing cultural protocols: ', ['@count' => count($result)]) . $link;

  $row = [
    'data' => [
      t('Media (atoms) with no assigned protocols'),
      t('In Mukurtu CMS v4, cultural protocols are now required for all media.'),
      $summary,
    ],
    'class' => mukurtu_migration_prep_get_status_class($status),
  ];
  return $row;
}

/**
 * Report for dictionary words with a non-empty additional media field.
 */
function mukurtu_migration_prep_report_dictionary_words_with_additional_media() {
  $result = views_get_view_result('migration_dictionary_words_with_additional_media');
  $status = empty($result) ? MUKURTU_MIGRATION_REPORT_STATUS_OK : MUKURTU_MIGRATION_REPORT_STATUS_WARNING;
  $link = l(t('Details'), 'admin/reports/migration/migration-dictionary-words-with-additional-media');
  $summary = $status == MUKURTU_MIGRATION_REPORT_STATUS_OK ? t('No dictionary words have additional media') : t('@count dictionary word(s) with additional media: ', ['@count' => count($result)]) . $link;

  $row = [
    'data' => [
      t('Dictionary words with additional media'),
      t('In Mukurtu CMS v4, the dictionary word additional media field will not be migrated.'),
      $summary,
    ],
    'class' => mukurtu_migration_prep_get_status_class($status),
  ];
  return $row;
}

/**
 * Report for dailymotion atoms.
 */
function mukurtu_migration_prep_report_dailymotion_atoms() {
  $result = views_get_view_result('migration_dailymotion_atoms');
  $status = empty($result) ? MUKURTU_MIGRATION_REPORT_STATUS_OK : MUKURTU_MIGRATION_REPORT_STATUS_WARNING;
  $link = l(t('Details'), 'admin/reports/migration/dailymotion-atoms');
  $summary = $status == MUKURTU_MIGRATION_REPORT_STATUS_OK ? t('No Dailymotion atoms found') : t('@count Dailymotion atom(s): ', ['@count' => count($result)]) . $link;

  $row = [
    'data' => [
      t('Dailymotion Atoms'),
      t('Support for Dailymotion has been dropped in Mukurtu CMS v4. Dailymotion atoms will not be migrated'),
      $summary,
    ],
    'class' => mukurtu_migration_prep_get_status_class($status),
  ];
  return $row;
}

/**
 * Report for scald authors.
 */
function mukurtu_migration_prep_report_scald_authors() {
  $result = views_get_view_result('migration_scald_authors');
  $status = empty($result) ? MUKURTU_MIGRATION_REPORT_STATUS_OK : MUKURTU_MIGRATION_REPORT_STATUS_WARNING;
  $link = l(t('Details'), 'admin/reports/migration/migration-scald-authors');
  $summary = $status == MUKURTU_MIGRATION_REPORT_STATUS_OK ? t('No Scald Authors terms found') : t('@count atom(s) use the Authors field: ', ['@count' => count($result)]) . $link;

  $row = [
    'data' => [
      t('Scald Authors Field'),
      t('The Scald "Authors" (scald_authors) field will not be migrated to Mukurtu CMS v4'),
      $summary,
    ],
    'class' => mukurtu_migration_prep_get_status_class($status),
  ];
  return $row;
}

