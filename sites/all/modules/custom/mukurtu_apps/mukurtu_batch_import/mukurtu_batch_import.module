<?php

/**
 * Implementation of hook_menu()
 */
function mukurtu_batch_import_menu() {

  $items['manage/zip_import'] = array(
    'title' => 'Import Batch Content',
    'description' => 'Import content into Mukurtu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mukurtu_batch_import_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}



/**
 * General configuration form for controlling the colorbox behaviour.
 */
function mukurtu_batch_import_form() {

  $default_upload = variable_get('mukurtu_batch_import_form', '');
  $default_upload = isset($default_upload['upload']['folder']) ? $default_upload['upload']['folder'] : NULL;

  $form['mukurtu_batch_import_form'] = array(
    '#type' => 'fieldset',
    '#title' => t('Import Batch Content'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['mukurtu_batch_import_form']['header'] = array(
    '#type' => 'markup',
    '#markup' => '<p>' . t('Upload content into Mukurtu by uploading a zip archive.') . '</p>',
  );

  $form['mukurtu_batch_import_form']['#attributes']['enctype'] = 'multipart/form-data';
  $form['mukurtu_batch_import_form']['media'] = array(
    '#type' => 'fieldset',
    '#title' => '<h3>' . t('1. Gather your files') . '</h3>',
    '#collapsible' => FALSE,
    '#description' => '<p>For CSV imports, ' . l('download a sample Zip file', drupal_get_path('module', 'mukurtu_batch_import') . '/demo.zip') . '. This Zip file contains sample CSV files from a simple digital heritage export. You can also export your existing content in the proper format from the ' . l('digital heritage management page', '/manage/digital-heritage') . '.</p><p>For Dublin Core and MODS XML imports, export an XML file from your system and create a Zip archive including the XML file and media files. </p><p>Information about CSV field formats can be found on the type specific ' . l("Mukurtu Import", 'import') . ' pages in the "Field Format Section" section. CSV files should be named to reflect their content type or match the corresponding importer name. For example, for a CSV file containing digital heritage items valid names would include "Node - Digital Heritage.csv" or "Digital Heritage.csv".</p>',
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['mukurtu_batch_import_form']['upload'] = array(
    '#type' => 'fieldset',
    '#title' => '<h3>' . t('2. Upload your zip file') . '</h3>',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['mukurtu_batch_import_form']['upload']['folder'] = array(
    '#type' => 'managed_file',
    '#title' => empty($default_upload) ? t('File') : NULL,
    '#description' => empty($default_upload) ? t('Select a zip file from your local system.') : t('Select a different zip file from your local system.'),
    '#size' => 22,
    '#upload_location' => 'private://mukurtu_batch_import',
    '#upload_validators' => array(
				  'file_validate_extensions' => array('zip')
				  ),
    '#default_value' => $default_upload,
  );

  if(isset($default_upload)) {
    $file = file_load($default_upload);
      if($file) {
          $form['mukurtu_batch_import_form']['upload']['folder']['#field_suffix'] = '<div class="file-link">' . t("Download File: ") . l($file->filename, file_create_url($file->uri)) . '</div>';

      }
  }


  $form['mukurtu_batch_import_form']['help'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="">' . l(t('Return to Dashboard'),'/dashboard', array('attributes' => array('class' => 'btn btn-default'))) . '</div>' ,
  );


  //$form['#submit'][] = 'mukurtu_batch_import_submit';
  //$form['#validate'][] = 'mukurtu_batch_import_validate';
  $form = system_settings_form($form);

/*   $form['actions']['import']['#type'] = 'submit'; */
/*   $form['actions']['import']['#value'] = t('Import'); */
/*   $form['actions']['import']['#submit'] = array('mukurtu_batch_import_import'); */



/*
    $list = _media_browser_plus_folder_list();
  return array(
    '#type' => 'select',
    '#language' => LANGUAGE_NONE,
    '#title' => t('Media Folder'),
    '#field_name' => 'field_tags',
    '#weigth' => -2,
    '#options' => $list,
    '#description' => t('Select a folder for the media to be put in'),
  );

*/


  $form['actions']['submit']['#value'] = t("Continue");
/*   array_push($form['actions']['import']['#submit'], 'mukurtu_batch_import_import'); */
  array_push($form['#submit'], 'mukurtu_batch_import_import');

  drupal_add_js(drupal_get_path('module', 'mukurtu_batch_import') . '/mukurtu_batch_import.js');

  return $form;
}

function mukurtu_batch_import_import($form, &$form_state) {
  $fid = $form_state['values']['mukurtu_batch_import_form']['upload']['folder'];
  $file = file_load($fid);

  if($file) {
    mukurtu_batch_import_parse_zip($file);
  }
}

function mukurtu_batch_import_parse_zip($file) {

  $file_path = drupal_realpath($file->uri);

  // Create a unique temporary folder to extract the zip file in
  /* $temp_extract_path = file_directory_temp();
  $temp_extract_path .= '/' . uniqid('mukurtu_upload_');
  mkdir($temp_extract_path); */

  $temp_extract_path = 'private://mukurtu_batch_import/' . uniqid('zip_import_');

  $zip = new ZipArchive;
  if ($zip->open($file_path) === TRUE) {
    $zip->extractTo($temp_extract_path);
    $zip->close();
    dsm('Zip file extracted');
    $_SESSION['mukurtu_zip_import']['temp_extract_path'] = $temp_extract_path;
  } else {
    dsm('Zip file not extracted.');
  }

  $feedback = array();
  mukurtu_batch_import_import_metadata($temp_extract_path);

  // Record/store feedback
  $messages = drupal_get_messages('status');

  // Delete extracted files from temporary directory
  // file_unmanaged_delete_recursive($temp_extract_path);
}

/**
 * Display the feedback in a custom output and provide a file of results.
 */
function mukurtu_batch_import_feedback($messages) {
    // dpm($messages);
}

/*
function mukurtu_batch_import_import_media($directory) {
    if (!is_dir($directory)) {
      form_set_error('directory', t('The provided directory does not exist.'));
    }

    $pattern = '*';
    $files = glob("$directory/$pattern");

    $batch = array(
      'title' => t('Importing'),
      'operations' => array(
        array('mukurtu_batch_import_media_batch', array($files)),
      ),
      'finished' => 'media_import_batch_import_complete',
      'file' => drupal_get_path('module', 'media') . '/includes/media.admin.inc',
    );
    batch_set($batch);
}


$counter = 0;
*/
/**
 * BatchAPI callback op for media import.
 */
/*
function mukurtu_batch_import_media_batch($files, &$context) {
  if (!isset($context['sandbox']['files'])) {
    // This runs the first time the batch runs.
    // This is stupid, but otherwise, I don't think it will work...
    $context['results'] = array('success' => array(), 'errors' => array());
    $context['sandbox']['max'] = count($files);
    $context['sandbox']['files'] = $files;
  }
  $files =& $context['sandbox']['files'];

  // Take a cut of files.  Let's do 10 at a time.
  $length = (count($files) > media_variable_get('import_batch_size')) ? media_variable_get('import_batch_size') : count($files);
  $to_process = array_splice($files, 0, $length);
  $image_in_message = '';

  foreach ($to_process as $file) {
    try {
      $file_obj = media_parse_to_file($file);
      $context['results']['success'][] = $file;
      if (!$image_in_message) {
        // @todo Is this load step really necessary? When there's time, test
        //   this, and either remove it, or comment why it's needed.
        $loaded_file = file_load($file_obj->fid);
        $image_in_message = file_view_file($loaded_file, 'preview');
      }
    }
    catch (Exception $e) {
      $context['results']['errors'][] = $file . " Reason: " . $e->getMessage();
    }
  }

  $context['message'] = "Importing " . theme('item_list', array('items' => $to_process));
  $context['message'] .= drupal_render($image_in_message); // Just for kicks, show an image we are importing

  $context['finished'] = ($context['sandbox']['max'] - count($files)) / $context['sandbox']['max'];
}
*/

// For a given entity type/bundle name, return various forms the filename might take
function mukurtu_batch_import_get_name_variants($entity_type, $bundle_name) {
    $entity_info = entity_get_info($entity_type);
    $bundle_info = $entity_info['bundles'][$bundle_name];

    $filters = array('-', '_', ' ', '_bundle');

    $variants[] = "{$entity_info['label']} - {$bundle_info['label']}";
    $variants[] = "{$entity_type}_{$bundle_name}";
    $variants[] = $bundle_name;

    foreach($filters as $filter) {
        if(stripos($bundle_name, $filter) !== FALSE) {
            $variants[] = str_replace($filter, '', $bundle_name);
        }
        if(stripos("{$entity_type}_{$bundle_name}", $filter) !== FALSE) {
            $variants[] = str_replace($filter, '', "{$entity_type}_{$bundle_name}");
       }

       if(stripos("{$entity_info['label']} - {$bundle_info['label']}", $filter) !== FALSE) {
            $variants[] = str_replace($filter, '', "{$entity_info['label']} - {$bundle_info['label']}");
       }
    }

    // Legacy filename support for older version of Mukurtu
    if($entity_type == 'node') {
        switch($bundle_name) {
        case 'cultural_protocol_group':
            $variants[] = 'protocol';
        }
    }

    return $variants;
}

// Try to figure out which importer a file should use based on its filename
function mukurtu_batch_import_filename_to_entity_bundle_name($filename) {
    $filename = strtolower($filename);
    $entities = _mukurtu_export_get_entity_bundle_array();
    $matches = array(0 => NULL);
    foreach($entities as $entity_type => $bundle) {
        foreach($bundle as $bundle_name) {
            foreach(mukurtu_batch_import_get_name_variants($entity_type, $bundle_name) as $variant) {
                if(stripos($filename, strtolower($variant)) !== FALSE) {
                    $file_type['entity_type'] = $entity_type;
                    $file_type['bundle_name'] = $bundle_name;

                    // Keep track of how many characters matched. We are assuming that
                    // the longer the match, the better.
                    $matches[strlen($variant)] = $file_type;
                }
            }
        }
    }

    ksort($matches);
    $bestmatch = end($matches);
    return $bestmatch;
}

function mukurtu_batch_import_generate_import_steps($files) {
  $content_import_steps = array();
  $taxonomy_import_steps = array();
  $scald_import_steps = array();
  $pre_import_community = array();
  $pre_import_protocol = array();

  foreach ($files as $file) {
    if (preg_match('/(.+)\.csv/', $file, $matches)) {
      if ($file_type = mukurtu_batch_import_filename_to_entity_bundle_name($matches[1])) {
        $entity_type = $file_type['entity_type'];
        $bundle_name = $file_type['bundle_name'];
        $importer = variable_get("mukurtu_export_feeds_{$entity_type}_{$bundle_name}", "mukurtu_import_{$entity_type}_{$bundle_name}");

        // Separate out imports by type.
        // We aren't going to fully resolve dependencies,
        // but we can import the types in the most likely order.
        switch ($entity_type) {
          case 'scald_atom':
            $scald_import_steps[] = array(
              'filename' => $matches[0],
              'importer' => $importer,
              'hide_warnings' => FALSE,
            );
            break;

          case 'taxonomy_term':
            $taxonomy_import_steps[] = array(
              'filename' => $matches[0],
              'importer' => $importer,
              'hide_warnings' => TRUE,
            );
            break;

          default:
            $content_import_steps[] = array(
              'filename' => $matches[0],
              'importer' => $importer,
              'hide_warnings' => FALSE,
            );
        }

        // Communities and protocols need to exist before most other content can be imported.
        // We'll import them once right away, then again later after media has been imported.
        if ($entity_type == 'node' && $bundle_name == 'community') {
          $pre_import_community[] = array(
            'filename' => $matches[0],
            'importer' => $importer,
            'hide_warnings' => TRUE,
          );
        }

        if ($entity_type == 'node' && $bundle_name == 'cultural_protocol_group') {
          $pre_import_protocol[] = array(
            'filename' => $matches[0],
            'importer' => $importer,
            'hide_warnings' => TRUE,
          );
        }
      }
    }
  }

  $all_steps = array_merge($taxonomy_import_steps, $pre_import_community, $pre_import_protocol, $scald_import_steps, $content_import_steps);

  return $all_steps;
}

function mukurtu_batch_import_import_metadata($path) {
  module_load_include('inc', 'feeds', 'feeds.pages');

  // Some zip archive programs place files inside a single folder. Rather than failing, if there is one directory in the root,
  // check if the files are there first.
  $files = scandir($path);

  foreach($files as $key => $file) {
      if($file == '.' || $file == '..' || $file == '__MACOSX') {
          unset($files[$key]);
      }
  }

  // Single folder in the extracted Zip archive
  if(count($files) == 1) {
      foreach($files as $file) {
          if(is_dir($path . DIRECTORY_SEPARATOR . $file)) {
              $path = $path . DIRECTORY_SEPARATOR . $file;
              $files = scandir($path);
          }
      }
  }

  // Check if it's an XML importer
  $xml_import = 0;
  foreach ($files as $file) {
    if (strpos($file, '.xml')) {

      // If XML importer, define simple single import step.
      $xml_import = 1;
      $import_steps = [
        [
          'filename' => $file,
          'importer' => 'digital_heritage_xml_dc_or_mods', // we don't know yet whether it's DC or MODS so we just use a generic name, which is fine because this doesn't get used within the batch importer, but does need to be defined.
          'hide_warnings' => FALSE,
        ],
      ];
      break;
    }
  }

  // If it's not an XML importer, build the import steps.
  if (!$xml_import) {
    // Take the files we've found and figure out which importers to use and in what order
    $import_steps = mukurtu_batch_import_generate_import_steps($files);
  }

  if(isset($_SESSION['mukurtu_zip_import']['hide_warnings'])) {
      unset($_SESSION['mukurtu_zip_import']['hide_warnings']);
  }
  $success = FALSE;

  // Run each import step
  foreach($import_steps as $import_step) {
      $filename = $import_step['filename'];
      $importer_id = $import_step['importer'];
      $hide_warnings = $import_step['hide_warnings'];

      $import_file_path = $path . DIRECTORY_SEPARATOR . $filename;
      if(file_exists($import_file_path)) {
          // Success in this case is finding at least one of the files we were looking for
          $success = TRUE;

          // Save as a managed file.
          $import_file = file_get_contents($import_file_path);

          // Crude method to support relative file paths
          $import_file = str_replace(MUKURTU_EXPORT_IMPORT_DIR, $path, $import_file);

          $destination = $path;
          file_prepare_directory($destination, FILE_CREATE_DIRECTORY);

          // Prefix will create a different file for imports that get run twice
          // Without this, feeds could try and run twice using the same file, which usually results in conflict
          $prefix = $hide_warnings ? 'hidden_' : '';
          $file = file_save_data($import_file, $destination . DIRECTORY_SEPARATOR . $prefix . $filename, FILE_EXISTS_REPLACE);

          if($hide_warnings) {
              $_SESSION['mukurtu_zip_import']['hide_warnings'][] = $importer_id;
          }

        // If it's an XML import, then set the imported file and go to the import options form, leaving this code at this point.
        if ($xml_import) {
          variable_set('dh_xml_import_fid', $file->fid);
          variable_set('dh_xml_import_is_batch', 1);
          drupal_goto('import/digital-heritage-xml-context');
        }

        // Not an XML importer. Proceed as normal.
        // Load the Feeds Source object.
          $source = feeds_source($importer_id);
          $fetcher_config = $source->getConfigFor($source->importer->fetcher);
          $fetcher_config['source'] = $file->uri;
          $fetcher_config['file'] = $file;

          // Set the source fetcher config.
          $source->setConfigFor($source->importer->fetcher, $fetcher_config);

          // Save the source.
          $source->save();

          // Do the import
          if($hide_warnings) {
            // For double run imports (community/protocol) we do the import *right now* rather than
            // scheduling.
            while (FEEDS_BATCH_COMPLETE != $source->import());
          } else {
            $source->startImport();
          }
      }
  }

  // If we didn't find any valid files, warn the user.
  if(!$success) {
      drupal_set_message("The importer could not find the required files inside the zip archive. Please check that the zip archive is valid.", NULL, 'warning');
  }
}

/**
 * Implements hook_feeds_before_import()
 */
function mukurtu_batch_import_feeds_before_import($source) {
    $config = $source->config;
    $importer = $source->importer();
    $import_config = $importer->config;

    if(stripos($config['FeedsFileFetcher']['source'], 'mukurtu_batch_import/zip_import_')) {
        if(isset($import_config['name'])) {
            // Display the name of the importer in bold
            drupal_set_message("<strong>" . $import_config['name'] . "</strong>");
        }
    }
}

/**
 * Implements hook_feeds_after_import()
 */
function mukurtu_batch_import_feeds_after_import($source) {
    $config = $source->config;
    if(stripos($config['FeedsFileFetcher']['source'], 'mukurtu_batch_import/zip_import_')) {
        $id = $source->importer()->id;

        if(isset($_SESSION['mukurtu_zip_import']['hide_warnings'])) {
            foreach($_SESSION['mukurtu_zip_import']['hide_warnings'] as $key => $hide_id) {
                if($hide_id == $id) {
                    // Hide warnings should probably be named hide errors
                    // We clear errors for the initial imports that might not have imported their dependencies yet
                    unset($_SESSION['mukurtu_zip_import']['hide_warnings'][$key]);
                    drupal_get_messages('error', TRUE);
                }
            }
        }
    }
}

function mukurtu_batch_import_form_ajax($form, $form_state) {
  $messages = drupal_get_messages('status');

  $commands = array();
  $commands[] = ajax_command_replace('.fieldset-description', $messages);

  // Set message.
  $commands[] = ajax_command_remove('#messages-wrap');
  $commands[] = ajax_command_after('#breadcrumb-wrap', '<div id="messages-wrap">' . theme('status_messages') . '</div>');

  return array('#type' => 'ajax', '#commands' => $commands);
}
