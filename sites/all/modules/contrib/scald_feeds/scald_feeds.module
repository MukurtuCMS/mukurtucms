<?php
/**
 * @file
 * Feeds mapper for Atoms.
 */

/**
 * Implements hook_feeds_processor_targets_alter().
 *
 * @see FeedsNodeProcessor::getMappingTargets()
 */
function scald_feeds_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);

    if (in_array($info['type'], array('atom_reference'))) {
      $targets[$name] = array(
        'name' => check_plain($instance['label']),
        'callback' => 'scald_feeds_set_target',
        'description' => t('The @label field of the node.', array('@label' => $instance['label'])),
      );
    }
  }
}

/**
 * Callback for mapping. Here is where the actual mapping happens.
 *
 * When the callback is invoked, $target contains the name of the field the
 * user has decided to map to and $value contains the value of the feed item
 * element the user has picked as a source.
 */
function scald_feeds_set_target($source, $entity, $target, $value) {
  if (empty($value)) {
    return;
  }

  // Make sure $value is an array of objects of type FeedsEnclosure.
  if (!is_array($value)) {
    $value = array($value);
  }

  foreach ($value as $k => $v) {
    if(!empty($value[$k])) {
      if (!($v instanceof FeedsEnclosure)) {
	if (is_string($v)) {
	  $value[$k] = new FeedsEnclosure($v, file_get_mimetype($v));
	}
	else {
	  unset($value[$k]);
	}
      }
    } else {
      unset($value[$k]);
    }
  }

  if (empty($value)) {
    return;
  }

  $entity_type = $source->importer->processor->entityType();

  // Determine file destination.
  // @todo This needs review and debugging.
  $instance_info = field_info_instance($entity_type, $target, $source->importer->processor->bundle());
  $info = field_info_field($target);
  $data = array();
  if (!empty($entity->uid)) {
    $data[$entity_type] = $entity;
  }

  // Populate entity.
  $i = isset($entity->{$target}[LANGUAGE_NONE])?count($entity->{$target}[LANGUAGE_NONE]):0;
  $field = isset($entity->$target) ? $entity->$target : array();

  foreach ($value as $v) {
    // First check if we are given a scald ID
    $existing_sid = FALSE;
    if(is_numeric($v->getValue())) {
        $atom = scald_atom_load($v->getValue());
        if($atom) {
            $existing_sid = $atom->sid;
        }
    }

    // Check if using a GUID for an existing scald atom previously imported by feeds
    if($existing_sid == FALSE) {
        $existing_sid = scald_feeds_lookup_atom_by_guid($v->getValue());
    }

    // Search for a previously imported matching scald atom and use that if found.
    if($existing_sid == FALSE) {
      $type = _scald_feeds_get_provider_by_mime_type($v->getMimeType());
      $existing_sid = scald_feeds_fetch_matching_atom($v->getValue(), $type);
    }

    if($existing_sid) {
      $field[LANGUAGE_NONE][$i] = array(
        'sid' => $existing_sid,
      );
      if ($info['cardinality'] == 1) {
        break;
      }
      $i++;
    }
    else {
      $sid = _scald_feeds_save_atom($v->getValue(), $type, urldecode(basename($v->getValue())));

      $field[LANGUAGE_NONE][$i] = array(
					'sid' => $sid,
        );
        if ($info['cardinality'] == 1) {
          break;
        }
        $i++;
    }
  }

  $entity->{$target} = $field;
}

function _scald_feeds_copy_fields($form, &$atom) {
  $basic_fields = array(
			'field_scald_description',
			'field_scald_headline',
			'field_licence_std_cc',
			'field_rights',
			'field_scald_location',
			'field_scald_creator'
			);

  foreach($basic_fields as $field) {
    if(isset($form[$field])){
      $atom->{$field} = $form[$field];
    }
  }

  if(isset($form['field_scald_geo_location'][LANGUAGE_NONE][0]['geom']['#default_value']['lat']) && isset($form['field_scald_geo_location'][LANGUAGE_NONE][0]['geom']['#default_value']['lon'])) {
    $atom->{'field_scald_geo_location'}[LANGUAGE_NONE][0]['input_format'] = 'lat/lon';
    $atom->{'field_scald_geo_location'}[LANGUAGE_NONE][0]['geom']['lat'] = $form['field_scald_geo_location'][LANGUAGE_NONE][0]['geom']['#default_value']['lat'];
    $atom->{'field_scald_geo_location'}[LANGUAGE_NONE][0]['geom']['lon'] = $form['field_scald_geo_location'][LANGUAGE_NONE][0]['geom']['#default_value']['lon'];
  }

  if (isset($form['field_scald_created'][LANGUAGE_NONE][0]['#default_value'])) {
    $value1 = str_replace('T', ' ', $form['field_scald_created'][LANGUAGE_NONE][0]['#default_value']['value']);
    $value2 = str_replace('T', ' ', $form['field_scald_created'][LANGUAGE_NONE][0]['#default_value']['value2']);
    $atom->field_scald_created[LANGUAGE_NONE] = array(array('value' => $value1, 'value2' => $value2));
  }

  if(isset($form['scald_tags'])) {
    foreach($form['scald_tags'][LANGUAGE_NONE] as $index => $tag) {
      $scald_tags = taxonomy_get_term_by_name($tag, 'scald_tags');

      if(!isset($atom->scald_tags[LANGUAGE_NONE])) {
	$atom->scald_tags[LANGUAGE_NONE] = array();
      }

      if(empty($scald_tags)) {
	$scald_tag_vocab = taxonomy_vocabulary_machine_name_load('scald_tags');

	if($scald_tag_vocab != FALSE) {
	  $new_scald_tag = new stdClass();
	  $new_scald_tag->name = $tag;
	  $new_scald_tag->vid = $scald_tag_vocab->vid;
	  taxonomy_term_save($new_scald_tag);
	  $atom->scald_tags[LANGUAGE_NONE][] = json_decode(json_encode($new_scald_tag), true);
	}
      } else {
	foreach($scald_tags as $tag) {
	  $atom->scald_tags[LANGUAGE_NONE][] = json_decode(json_encode($tag), true);
	}
      }
    }
  }
}

/**
 * Saves a Scald Atom programmatically from a file.
 */
function _scald_feeds_save_atom($file, $type, $title = NULL) {
  $atoms = array(new ScaldAtom($type, 'scald_' . $type));

  // Skip atom type the user isn't allowed to create.
  if (!scald_action_permitted($atoms[0], 'create')) {
    return FALSE;
  }

  if(valid_url($file, TRUE)) {
    $data = drupal_http_request($file);
    $temp_file = file_unmanaged_save_data($data->data);
  } else {
    $temp_file = file_unmanaged_copy($file);
  }

  if($temp_file === FALSE) {
    return FALSE;
  }

  $providers = scald_atom_providers();
  $sources = $providers[$type];
  $source = key($sources);

  $form_state = array(
			   'values' =>  array(
					      'file' => array( array ('name' => $title, 'tmppath' => $temp_file))
					      ),
			   'scald' => array( 'type' => $type, 'source' => isset($source) ? $source : NULL, 'atoms' => array($atoms[0])),
			   'ajax' => 0
			   );
  $form = array('atom0' => array('#entity' =>  $atoms[0], '#parents' => array('atom0')));
  $form['#entity_type'] = 'scald_atom';
  $form_id = 'scald_atom_add_form_options';

  $add_form_function = 'scald_' . $type . '_scald_add_form';
  if(function_exists($add_form_function)) {
    $add_form_function($form, $form_state);
  } else {
    return FALSE;
  }

  $fill_form_function = 'scald_' . $type . '_scald_add_form_fill';
  if(function_exists($fill_form_function)) {
    $fill_form_function($atoms, $form, $form_state);
  } else {
    return FALSE;
  }

  drupal_alter('form', $form, $form_state, $form_id);

  // The atom should really be built using entity_form_submit_build_entity...
  _scald_feeds_copy_fields($form['atom0'], $atoms[0]);

  $atoms[0]->scald_file[LANGUAGE_NONE][0]['display'] = TRUE;

  return scald_atom_save($atoms[0]);
}


/**
 * Suggests a Scald provider for the given file.
 *
 * Chooses from file, audio, image and video.
 */
function _scald_feeds_get_provider_by_mime_type($mime_type) {
  $type = 'file';

  if (strpos($mime_type, 'audio/') === 0) {
    $type = 'audio';
  }
  if (strpos($mime_type, 'image/') === 0) {
    $type = 'image';
  }
  elseif (strpos($mime_type, 'video/') === 0) {
    $type = 'video';
  }

  return $type;
}

/**
 * Looks up an atom by GUID, assumes SQL storage backend.
 *
 * @param string $guid
 *   The Feeds GUID to compare against.
 *
 * @return int|FALSE
 *   The atom id, or FALSE if one was not found.
 */
function scald_feeds_lookup_atom_by_guid($guid) {
  return db_select('feeds_item')
    ->fields('feeds_item', array('entity_id'))
    ->condition('entity_type', 'scald_atom')
    ->condition('guid', $guid)
    ->execute()
    ->fetchField();
}


/**
 * Looks for an existing imported atom that is equivalent to a newly created atom using the new file.
 * This is to avoid creating duplicate atoms on repeated feed imports.
 *
 * @param string $filename
 *   The full path & filename of the file to compare
 *
 * @return int|FALSE
 *   The atom id, or FALSE if one was not found.
 */
function scald_feeds_fetch_matching_atom($filename, $type) {
  global $user;

  $scald_query = array( 'title' => basename($filename),
			'type' => $type,
			'publisher' => $user->uid);
  $sids = scald_search($scald_query, FALSE);

  if(!$sids) {
    return FALSE;
  }

  foreach ($sids as $sid) {
    $atom = scald_atom_load($sid);

    switch ($type) {
    case 'file':
      scald_file_scald_fetch($atom, 'atom');
      break;
    case 'image':
      scald_image_scald_fetch($atom, 'atom');
      break;
    case 'audio':
      scald_audio_scald_fetch($atom, 'atom');
      break;
    case 'video':
      scald_video_scald_fetch($atom, 'atom');
      break;
    }

    // For external files, save file to a temporary directory to compare on.
    $external_file = 0;
    if (strtolower(substr($filename, 0, 4) == 'http')) {
      $external_file = 1;
      $file_contents = file_get_contents($filename);
      $filename = drupal_tempnam('temporary://', 'file');
      file_put_contents($filename, $file_contents);
    }

    $new_file_filesize = filesize($filename);
    $new_file_md5 = md5_file($filename);

    if ($external_file) {
      unlink($filename);
    }

    if (filesize($atom->file_source) == $new_file_filesize &&
	md5_file($atom->file_source) == $new_file_md5 &&
	$atom->changed == $atom->created) {

      return $sid;
    }
  }

  return FALSE;
}
