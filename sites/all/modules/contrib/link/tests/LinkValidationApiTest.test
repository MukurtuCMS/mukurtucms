<?php

/**
 * @file
 * Validate the link_validate_url() validation API.
 */

/**
 * Validate the link_validate_url() validation API.
 *
 * Validation is guided by the rules in http://tools.ietf.org/html/rfc1738.
 */
class LinkValidationApiTest extends LinkBaseTestClass {

  /**
   * Get Info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Link Validation API Tests',
      'description' => 'Tests the link_validate_url() function by itself, without invoking the full drupal/cck lifecycle.',
      'group' => 'Link',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp(array $modules = array()) {
    $modules[] = 'link';
    parent::setUp($modules);
  }

  /**
   * Name Link Type.
   *
   * Translates the LINK type constants to english for display and debugging of
   * tests.
   *
   * @todo What is this for? Can it be removed?
   *
   * @codingStandardsIgnoreStart
   */
  public function name_Link_Type($type) {
    // @codingStandardsIgnoreEnd
    switch ($type) {
      case LINK_FRONT:
        return "Front";

      case LINK_EMAIL:
        return "Email";

      case LINK_TEL:
        return "Telephone";

      case LINK_NEWS:
        return "Newsgroup";

      case LINK_INTERNAL:
        return "Internal Link";

      case LINK_EXTERNAL:
        return "External Link";

      case FALSE:
        return "Invalid Link";

      default:
        return "Bad Value:" . $type;
    }
  }

  /**
   * Make sure that a link labeled <front> works.
   */
  public function testValidateFrontLink() {
    $valid = link_validate_url('<front>');
    $this->assertEqual(LINK_FRONT, $valid, 'Make sure that front link is verified and identified');
  }

  /**
   * Validate Email Link.
   */
  public function testValidateEmailLink() {
    $valid = link_validate_url('mailto:bob@example.com');
    $this->assertEqual(LINK_EMAIL, $valid, "Make sure a basic mailto is verified and identified");
  }

  /**
   * Validate Email Link Bad.
   */
  public function testValidateEmailLinkBad() {
    $valid = link_validate_url(':bob@example.com');
    $this->assertEqual(FALSE, $valid, 'Make sure just a bad address is correctly failed');
  }

  /**
   * Confirm that valid tel: links work as expected.
   */
  public function testValidateTelLinks() {
    $links = array(
      'tel:01',
      'tel:123456789012345',
      'tel:+123456789012345',
    );
    foreach ($links as $link) {
      $type = link_url_type($link);
      $this->assertEqual(LINK_TEL, $type, 'Test ' . $link . ' is a tel link.');
      $valid = link_validate_url($link);
      $this->assertTrue($valid, 'Test ' . $link . ' is valid tel link.');
    }
  }

  /**
   * Confirm that invalid tel: links work as expected.
   */
  public function testValidateTelLinksBad() {
    $links = array(
      'tel:0',
      'tel:1234567890123456',
      'tel:+1',
      'tel:+0123456789',
      'tel:+1234567890123456',
      ':12345678',
    );
    foreach ($links as $link) {
      $type = link_url_type($link);
      $this->assertFalse($type, 'Test ' . $link . ' is not a tel link.');
      $valid = link_validate_url($link);
      $this->assertFalse($valid, 'Test ' . $link . ' is not a valid tel link.');
    }
  }

  /**
   * Validate Newsgroup Link.
   */
  public function testValidateNewsgroupLink() {
    $valid = link_validate_url('news:comp.infosystems.www.misc');
    $this->assertEqual(LINK_NEWS, $valid, 'Make sure link to newsgroup validates as news.');
  }

  /**
   * Validate News Article Link.
   */
  public function testValidateNewsArticleLink() {
    $valid = link_validate_url('news:hj0db8$vrm$1@news.eternal-september.org');
    $this->assertEqual(LINK_NEWS, $valid, 'Make sure link to specific article validates as news.');
  }

  /**
   * Validate Bad Newsgroup Link.
   */
  public function testValidateBadNewsgroupLink() {
    $valid = link_validate_url('news:comp.bad_name.misc');
    $this->assertEqual(FALSE, $valid, 'newsgroup names can\'t contain underscores, so it should come back as invalid.');
  }

  /**
   * Validate Internal Links.
   */
  public function testValidateInternalLinks() {
    $tempfile = drupal_tempnam('public://files', 'test');
    $links = array(
      'rss.xml',
      'foo#bar',
      file_uri_target($tempfile),
      drupal_realpath($tempfile),
    );

    foreach ($links as $link) {
      $type = link_url_type($link);
      $this->assertEqual(LINK_INTERNAL, $type, 'Test ' . $link . ' is an internal link.');
      $valid = link_validate_url($link);
      $this->assertTrue($valid, 'Test ' . $link . ' is valid internal link.');
    }
  }

  /**
   * Validate External Links.
   */
  public function testValidateExternalLinks() {
    $links = array(
      'http://localhost:8080/',
      'www.example.com',
      'www.example.com/',
      'http://username:p%40ssw0rd!@www.example.com/',
      'http://@www.example.com/',
      'http://username:@www.example.com/',
      'http://username:password@www.example.com:8080/',
      'http://127.0.0.1:80/',
      'http://127.173.24.255:4723/',
      '127.173.24.255:4723/',
      'http://255.255.255.255:4823/',
      'www.test-site.com',
      'http://example.com/index.php?q=node/123',
      'http://example.com/?first_name=Joe Bob&last_name=Smith',
      // Anchors.
      'http://www.example.com/index.php#test',
      'http://www.example.com/index.php#this@that.',
      'http://www.example.com/index.php#',
      'http://www.cnn.com/video/#/video/politics/2008/12/09/intv.madeleine.albright.cnn',
      'http://www.archive.org/stream/aesopsfables00aesorich#page/n7/mode/2up',
      'http://www.example.com/blah/#this@that?',
    );

    // Test all of the protocols.
    $allowed_protocols = variable_get('filter_allowed_protocols', array(
      'http',
      'https',
      'ftp',
      'news',
      'nntp',
      'telnet',
      'mailto',
      'irc',
      'ssh',
      'sftp',
      'webcal',
    ));

    foreach ($allowed_protocols as $protocol) {
      if ($protocol !== 'news' && $protocol !== 'mailto') {
        $links[] = $protocol . '://www.example.com';
        $links[] = $protocol . '://www.example.com/resource';
      }
    }
    foreach ($links as $link) {
      $type = link_url_type($link);
      $this->assertEqual(LINK_EXTERNAL, $type, 'Testing that ' . $link . ' is an external link.');
      $valid = link_validate_url($link);
      $this->assertTrue($valid, 'Test ' . $link . ' is valid external link.');
      // The following two lines are commented out and only used for
      // comparisons.
      // @code
      // $valid2 = valid_url($link, TRUE);
      // $this->assertEqual(TRUE, $valid2, "Using valid_url() on $link.");.
      // @endcode
    }
  }

  /**
   * Check Invalid External Links.
   */
  public function testInvalidExternalLinks() {
    $links = array(
      'http://www.ex ample.com/',
      // Bad ip!
      'http://25.0.0/',
      'http://4827.0.0.2/',
      // ß not allowed in domain names!
      'http://www.testß.com/',
      // Bad TLD.
      'http://.www.foo.bar./',
      // Domains can't have sections starting with a dash.
      // 'http://www.-fudge.com/',
      'http://example.com/index.php?page=this\that',
      'example@example.com',
    );
    foreach ($links as $link) {
      $valid = link_validate_url($link);
      $this->assertEqual(FALSE, $valid, 'Testing that ' . $link . ' is not a valid link.');
    }
  }

}
