<?php

/**
 * @file
 * File for Crud Tests.
 *
 * Basic CRUD simpletests for the link module, based off of content.crud.test in
 * CCK.
 */

/**
 * Content Crud.
 */
class LinkContentCrudTest extends DrupalWebTestCase {

  /**
   * Get Info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Link CRUD - Basic API tests',
      'description' => 'Tests the field CRUD (create, read, update, delete) API.',
      'group' => 'Link',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp(array $modules = array()) {
    $modules[] = 'field_ui';
    $modules[] = 'link';
    parent::setUp($modules);
  }

  /**
   * Create Field API.
   *
   * All we're doing here is creating a content type, creating a simple link
   * field on that content type.
   */
  public function testLinkCreateFieldApi() {
    $content_type_friendly = $this->randomName(20);
    $content_type_machine = strtolower($this->randomName(10));

    // Create and login user.
    $this->web_user = $this->drupalCreateUser(array(
      'administer content types',
      'administer fields',
    ));
    $this->drupalLogin($this->web_user);

    $this->drupalGet('admin/structure/types');

    // Create the content type.
    $this->clickLink(t('Add content type'));

    $edit = array(
      'name' => $content_type_friendly,
      'type' => $content_type_machine,
    );
    $this->drupalPost(NULL, $edit, t('Save and add fields'));
    $this->assertText(t('The content type @name has been added.', array('@name' => $content_type_friendly)));

    // Now add a singleton field.
    $single_field_name_friendly = $this->randomName(20);
    $single_field_name_machine = strtolower($this->randomName(10));
    $edit = array(
      'fields[_add_new_field][label]' => $single_field_name_friendly,
      'fields[_add_new_field][field_name]' => $single_field_name_machine,
      'fields[_add_new_field][type]' => 'link_field',
      'fields[_add_new_field][widget_type]' => 'link_field',
    );
    $this->drupalPost(NULL, $edit, t('Save'));

    // We'll go with the default settings for this run-through.
    $this->drupalPost(NULL, array(), t('Save field settings'));

    // Using all the default settings, so press the button.
    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertText(t('Saved @name configuration.', array('@name' => $single_field_name_friendly)));

    // Somehow clicking "save" isn't enough, and we have to do a
    // node_types_rebuild().
    node_types_rebuild();
    menu_rebuild();
    $type_exists = db_query('SELECT 1 FROM {node_type} WHERE type = :type', array(':type' => $content_type_machine))->fetchField();
    $this->assertTrue($type_exists, 'The new content type has been created in the database.');
  }

}
