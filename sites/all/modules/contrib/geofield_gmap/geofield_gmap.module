<?php

/**
 * @file
 * Google Map widget for geofield. For now allow to use a
 * google map v3 map to input a location. A quick text
 * input + geocode allow you to specify an address.
 * You can drag and drop the marker to narrow the position.
 */

/**
 * Implements hook_menu().
 */
function geofield_gmap_menu() {
  $items['admin/config/content/geofield_gmap'] = array(
    'title' => 'Geofield Gmap',
    'description' => 'Settings for Geofield Gmap.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geofield_gmap_admin_settings'),
    'access arguments' => array('administer geofield_gmap'),
    'file' => 'geofield_gmap.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_field_widget_info().
 */
function geofield_gmap_field_widget_info() {
  return array(
    'geofield_gmap' => array(
      'label' => t('Google Map'),
      'field types' => array('geofield'),
      'settings' => array(
        'map_type' => 'ROADMAP',
        'confirm_center_marker' => FALSE,
        'click_to_place_marker' => FALSE,
      ),
      'module' => 'geofield_gmap',
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function geofield_gmap_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;

  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'geofield_gmap') {
    if (!isset($settings['map_type'])) {
      $settings['map_type'] = 'ROADMAP';
    }
    if (!isset($settings['confirm_center_marker'])) {
      $settings['confirm_center_marker'] = FALSE;
    }
    if (!isset($settings['click_to_place_marker'])) {
      $settings['click_to_place_marker'] = FALSE;
    }

    $latlon_value = array(
      'lat' => '',
      'lon' => '',
    );
    if (isset($items[$delta]['lat'])) {
      $latlon_value['lat'] = floatval($items[$delta]['lat']);
    }
    if (isset($items[$delta]['lon'])) {
      $latlon_value['lon'] = floatval($items[$delta]['lon']);
    }
    // Try to fetch data from form state if lon/lat is empty.
    if (isset($form_state['input'][$field['field_name']][$langcode][$delta]['geom'])) {
      $latlon_value = $form_state['input'][$field['field_name']][$langcode][$delta]['geom'];
    }
    // If we still have empty lat and long, use the field's default values.
    if (!$latlon_value['lat'] || !$latlon_value['lon']) {
      if ($default_field_value = field_get_default_value($base['#entity_type'], $base['#bundle'], $field, $instance, $langcode)) {
        if ($default_geom_value = $default_field_value[0]['geom']) {
          $latlon_value = $default_geom_value;
        }
      }
    }
    $element['geom'] = array(
      '#type' => 'geofield_latlon',
      '#title' => check_plain($instance['label']),
      '#description' => field_filter_xss($instance['description']),
      '#default_value' => $latlon_value,
      '#required' => $instance['required'],
      '#geolocation' => (!empty($settings['html5_geolocation'])) ? $settings['html5_geolocation'] : FALSE,
      '#geofield_gmap_geolocation_override' => (!empty($settings['html5_geolocation'])) ? $settings['html5_geolocation'] : FALSE,
      '#zoom_level' => (!empty($settings['zoom_level'])) ? $settings['zoom_level'] : 1,
    );

    // $element['input_format'] is not a db field, but we use it determine how
    // to parse/calculate values in our widget.
    $element['input_format'] = array(
      '#type' => 'value',
      '#attributes' => array('class' => array('geofield_input_format')),
      '#value' => GEOFIELD_INPUT_LAT_LON,
    );

    $element['master_column']['#value'] = 'latlon';

    $element['#gmap_id'] = geofield_gmap_get_id($element);
    $element['#gmap_map_type'] = $settings['map_type'];
    $element['#gmap_confirm_center_marker'] = $settings['confirm_center_marker'];
    $element['#gmap_click_to_place_marker'] = $settings['click_to_place_marker'];
    $element['#after_build'] = array('geofield_gmap_widget_gmap_afterbuild');
  }

  return $element;
}

/**
 * Callback for afterbuild for widget for js addition.
 */
function geofield_gmap_widget_gmap_afterbuild($element, &$form_state) {

  // Retrieve the Google API Key, if there is one.
  $api_key = variable_get('geofield_gmap_google_api_key');
  $api_key_query_param = !empty($api_key) ? '?key=' . $api_key : '';

  // Attach GMAP API and autocomplete library.
  $element['#attached']['library'][] = array('system', 'ui.autocomplete');
  $element['#attached']['js'][] = array(
    'data' => '//maps.googleapis.com/maps/api/js' . $api_key_query_param,
    'type' => 'external',
    'preprocess' => FALSE,
  );

  $id = $element['#gmap_id'];
  $gmapid = 'gmap-' . $id;
  $element['geom']['lat']['#prefix'] = '<div class="form-item">';
  $element['geom']['lat']['#prefix'] .= '<label>' . t("Geocode address") . '</label><input size="64" id="search-' . $id . '" class="form-text form-autocomplete geofield-gmap-search" type="text"/>';
  $element['geom']['lat']['#prefix'] .= '<div id="' . $gmapid . '" class="geofield-gmap-cnt"></div>';
  $element['geom']['lat']['#prefix'] .= '<div class="geofield-gmap-buttons">';
  $element['geom']['lat']['#prefix'] .= '<label>' . t("Drag the marker to narrow the location") . '</label>';
  $element['geom']['lat']['#prefix'] .= '<button class="geofield-gmap-center" onclick="geofield_gmap_center(\'' . $gmapid . '\'); return false;">' . t('Find marker') . '</button>';
  $element['geom']['lat']['#prefix'] .= '<button class="geofield-gmap-marker" onclick="geofield_gmap_marker(\'' . $gmapid . '\'); return false;">' . t('Place marker here') . '</button>';
  $element['geom']['lat']['#prefix'] .= '</div>';
  $element['geom']['lat']['#prefix'] .= '</div>';

  // Attach JS settings.
  $element['#attached']['js'][] = array(
    'data' => array('geofield_gmap' => array(
      $gmapid => array(
        'lat' => floatval($element['geom']['lat']['#default_value']),
        'lng' => floatval($element['geom']['lon']['#default_value']),
        'zoom' => intval($element['geom']['#zoom_level']),
        'latid' => $element['geom']['lat']['#id'],
        'lngid' => $element['geom']['lon']['#id'],
        'searchid' => 'search-' . $id,
        'mapid' => $gmapid,
        'widget' => TRUE,
        'map_type' => $element['#gmap_map_type'],
        'confirm_center_marker' => (bool) $element['#gmap_confirm_center_marker'],
        'click_to_place_marker' => (bool) $element['#gmap_click_to_place_marker'],
      ),
    )),
    'type' => 'setting',
  );

  if (isset($element['geom']['#geofield_gmap_geolocation_override']) && $element['geom']['#geofield_gmap_geolocation_override']) {
    // Add override behavior.
    $element['#attached']['js'][] = drupal_get_path('module', 'geofield_gmap') . '/geofield_gmap_geolocation_override.js';
  }

  return $element;
}

/**
 * Helper function: Generate a unique id for the map element.
 */
function geofield_gmap_get_id($element, $type = 'id') {
  $id = array_merge($element['#field_parents'], array(
    $element['#field_name'],
    $element['#language'],
    $element['#delta'],
  ));
  return strtr(implode('-', $id), '_', '-');
}

/**
 * Implements hook_field_widget_settings_form().
 */
function geofield_gmap_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  if (!isset($settings['map_type'])) {
    $settings['map_type'] = 'ROADMAP';
  }
  if (!isset($settings['confirm_center_marker'])) {
    $settings['confirm_center_marker'] = FALSE;
  }
  if (!isset($settings['click_to_place_marker'])) {
    $settings['click_to_place_marker'] = FALSE;
  }
  if (!isset($settings['html5_geolocation'])) {
    $settings['html5_geolocation'] = FALSE;
  }

  $form = array();

  if ($widget['type'] == 'geofield_gmap') {

    $form['map_type'] = array(
      '#type' => 'select',
      '#title' => t('Map type'),
      '#default_value' => $settings['map_type'],
      '#options' => array(
        'ROADMAP' => t('Roadmap'),
        'SATELLITE' => t('Satellite'),
        'HYBRID' => t('Hybrid'),
        'TERRAIN' => t('Terrain'),
      ),
    );
    $form['zoom_level'] = array(
      '#type' => 'textfield',
      '#title' => t('Default zoom level'),
      '#default_value' => (!empty($settings['zoom_level'])) ? $settings['zoom_level'] : 1,
      '#required' => FALSE,
    );
    $form['confirm_center_marker'] = array(
      '#type' => 'checkbox',
      '#title' => t('Confirm center marker'),
      '#default_value' => $settings['confirm_center_marker'],
    );
    $form['click_to_place_marker'] = array(
      '#type' => 'checkbox',
      '#title' => t('Click to place marker'),
      '#default_value' => $settings['click_to_place_marker'],
    );
    $form['html5_geolocation'] = array(
      '#type' => 'checkbox',
      '#title' => t('HTML5 geolocation'),
      '#default_value' => $settings['html5_geolocation'],
    );

  }
  return $form;
}

/**
 * Implements hook_permission().
 */
function geofield_gmap_permission() {
  return array(
    'administer geofield_gmap' => array(
      'title' => t('Administer Geofield Gmap'),
      'description' => t('Administer Geofield Gmap.'),
    ),
  );
}
