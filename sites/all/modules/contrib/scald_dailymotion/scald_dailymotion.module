<?php

/**
 * @file
 * Defines a Dailymotion provider for Scald.
 */

define('SCALD_DAILYMOTION_API', 'https://api.dailymotion.com/');
define('SCALD_DAILYMOTION_MAX_ITEMS', 30);

/**
 * List of required fields for correct video import.
 *
 * @return array
 *   Return array with fields values.
 */
function _scald_dailymotion_api_fields() {
  $fields = &drupal_static(__FUNCTION__, NULL);
  if (!isset($fields)) {
    $fields = array(
      'aspect_ratio',
      'available_formats',
      'created_time',
      'id',
      'owner.username',
      'tags',
      'thumbnail_url',
      'title',
      'private',
    );

    // Allow other modules to fetch additional fields from the API.
    drupal_alter('scald_dailymotion_api_fields', $fields);
  }

  return $fields;
}

/**
 * Calculates video dimensions.
 *
 * @param object $video
 *   The video object with at least aspect_ratio and available_formats values.
 */
function _scald_daimotion_video_calculate_dimensions($video) {
  // @todo check value of l1 and l2.
  $formats = array(
    'uhd2160' => 2160,
    'uhd1440' => 1440,
    'hd1080' => 1080,
    'hd720' => 720,
    'hq' => 480,
    'sd' => 380,
    'ld' => 240,
    'l2' => 180,
    'l1' => 120,
  );

  foreach ($formats as $name => $height) {
    if (in_array($name, $video->available_formats)) {
      $video->height = $height;
      $video->width = round($height * $video->aspect_ratio);
      return;
    }
  }
}

/**
 * Make an API call.
 *
 * @param string $method
 *   Method for URL.
 * @param array $params
 *   Params for URL.
 *
 * @return mixed
 *   NULL if the request fails.
 */
function _scald_dailymotion_api_call($method, array $params = array()) {
  $url = SCALD_DAILYMOTION_API . $method;
  if ($params) {
    foreach ($params as $key => $value) {
      if (is_array($value)) {
        $params[$key] = implode(',', $value);
      }
    }
    $url .= '?' . http_build_query($params);
  }
  $response = drupal_http_request($url);
  if (empty($response->error) && !empty($response->data)) {
    return json_decode($response->data);
  }
}

/**
 * Implements hook_scald_atom_providers().
 *
 * Tell Scald that we'll be providing some video atoms.
 */
function scald_dailymotion_scald_atom_providers() {
  return array(
    'video' => 'Video hosted on Dailymotion',
  );
  // This code will never be hit, but is necessary to mark the string
  // for translation on localize.d.o.
  // @codingStandardsIgnoreLine
  t('Video hosted on Dailymotion');
}

/**
 * Implements hook_scald_add_form().
 */
function scald_dailymotion_scald_add_form(&$form, &$form_state) {
  if (isset($_GET['dm-id'])) {
    $identifier = $_GET['dm-id'];
  }
  else {
    $identifier = '';
  }

  $form['identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Dailymotion video identifier or URL'),
    '#element_validate' => array('scald_dailymotion_validate_id'),
    '#default_value' => $identifier,
  );

  if (!$identifier) {
    $attributes = array();
    if (!empty($form_state['ajax'])) {
      $attributes['target'] = '_blank';
      $attributes['class'][] = 'overlay-exclude';
    }
    $form['search'] = array(
      '#type' => 'item',
      '#markup' => l(t('Search on Dailymotion'), 'atoms/dailymotion/search', array('attributes' => $attributes)),
    );
  }
}

/**
 * Create a Scald atom from a video object.
 *
 * @param object $video
 *   Object with video values.
 * @param mixed $atom
 *   Object with atom values.
 * @param bool $permanent
 *   Whether $atom is temporary object (in a multi-step form) or permanent atom.
 *
 * @return ScaldAtom
 *   Return the ScaldAtom object.
 */
function scald_dailymotion_create_atom($video, $atom = NULL, $permanent = TRUE) {
  if (!$atom) {
    $atom = new ScaldAtom('video', 'scald_dailymotion');
  }

  $atom->base_id = $video->id;
  $atom->title = $video->title;
  $atom->publisher = $GLOBALS['user']->uid;

  // Fill or prefill the author.
  $langcode = field_language('scald_atom', $atom, 'scald_authors');
  if ($permanent) {
    if ($term = scald_dailymotion_taxonomy_get_create($video->author, variable_get('scald_author_vocabulary'))) {
      $atom->scald_authors[$langcode][0] = array(
        'tid' => $term->tid,
      );
    }
  }
  else {
    $atom->scald_authors[$langcode][0] = array(
      'tid' => 0,
      'taxonomy_term' => (object) (array('name' => $video->author)),
    );
  }

  // Fill or prefill tags.
  $langcode = field_language('scald_atom', $atom, 'scald_tags');
  if ($permanent) {
    foreach ($video->tags as $index => $tag) {
      if ($term = scald_dailymotion_taxonomy_get_create($tag, variable_get('scald_tags_vocabulary'))) {
        $atom->scald_tags[$langcode][$index] = array(
          'tid' => $term->tid,
        );
      }
    }
  }
  else {
    foreach ($video->tags as $index => $tag) {
      $atom->scald_tags[$langcode][$index] = array(
      // Beware, this is not a real tid, it's just an index.
        'tid' => $index,
        'taxonomy_term' => (object) (array('name' => $tag)),
      );
    }
  }

  // Save video width and height.
  if (!isset($atom->data)) {
    $atom->data = array();
  }
  $atom->data['video_width'] = $video->width;
  $atom->data['video_height'] = $video->height;
  $atom->data['aspect_ratio'] = $video->aspect_ratio;

  // Download a copy of the video thumbnail. This makes it possible
  // to do interesting manipulation with image styles presets.
  $thumb = drupal_http_request($video->thumbnail_url);
  if ($thumb->code == 200 && $directory = ScaldAtomController::getThumbnailPath('video')) {
    $dest = $directory . '/dailymotion-' . $video->id . '.jpg';
    $file = file_save_data($thumb->data, $dest);

    // Set the file status to temporary.
    db_update('file_managed')
      ->condition('fid', $file->fid)
      ->fields(array('status' => 0))
      ->execute();
    $langcode = field_language('scald_atom', $atom, 'scald_thumbnail');
    $atom->scald_thumbnail[$langcode][0] = (array) $file;
  }

  // Allow module to alter the atom being created.
  drupal_alter('scald_dailymotion_create_atom', $atom, $video);

  return $atom;
}

/**
 * Implements hook_scald_add_form_fill().
 */
function scald_dailymotion_scald_add_form_fill(&$atoms, $form, $form_state) {
  // Get the DM identifier.
  $identifier = scald_dailymotion_parse_id($form_state['values']['identifier']);
  $video = scald_dailymotion_video($identifier);
  // Compatibility with Scald 1.1+.
  $atom = is_array($atoms) ? reset($atoms) : $atoms;
  scald_dailymotion_create_atom($video, $atom, FALSE);
}

/**
 * Implements hook_scald_fetch().
 */
function scald_dailymotion_scald_fetch($atom, $type) {
  $items = field_get_items('scald_atom', $atom, 'scald_thumbnail');
  if ($items && file_exists($items[0]['uri'])) {
    $atom->file_source = $atom->thumbnail_source = $items[0]['uri'];
  }
}

/**
 * Implements hook_scald_prerender().
 */
function scald_dailymotion_scald_prerender($atom, $context, $options, $mode) {
  if ($mode == 'atom') {
    // Load context configuration to retrieve dimension data if present.
    $context_config = scald_context_config_load($context);
    $video_width = (!empty($atom->data['video_width'])) ? $atom->data['video_width'] : 480;
    $video_height = (!empty($atom->data['video_height'])) ? $atom->data['video_height'] : 365;
    // Allow context configuration to override video dimension variables.
    if (!empty($context_config->data['width'])) {
      $video_width = $context_config->data['width'];
    }
    if (!empty($context_config->data['height'])) {
      $video_height = $context_config->data['height'];
    }
    $atom->rendered->player = theme('scald_dailymotion_player',
      array(
        'vars' =>
        array(
          'video_id'      => $atom->base_id,
          'video_width'   => $video_width,
          'video_height'  => $video_height,
          'thumbnail'     => $atom->rendered->thumbnail_source_url,
          'title'         => check_plain($atom->title),
        ),
        'atom' => $atom,
      )
    );
  }
}

/**
 * Implements hook_theme().
 */
function scald_dailymotion_theme() {
  return array(
    'scald_dailymotion_player' => array(
      'variables' => array('vars' => NULL, 'atom' => NULL),
      'template' => 'scald_dailymotion_player',
    ),
    'scald_dailymotion_imports_table' => array(
      'render element' => 'form',
      'file' => 'scald_dailymotion.admin.inc',
    ),
    'scald_dailymotion_search_results_table' => array(
      'render element' => 'form',
      'file' => 'scald_dailymotion.pages.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function scald_dailymotion_permission() {
  return array(
    'administer dailymotion imports' => array(
      'title' => t('Administer DailyMotion imports'),
      'description' => t('Add or remove DailyMotion feeds of videos that should be imported automatically.'),
    ),
    'import dailymotion videos' => array(
      'title' => t('Import DailyMotion videos'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function scald_dailymotion_cron() {
  $imports = variable_get('scald_dailymotion_imports', array());
  $status = variable_get('scald_dailymotion_imports_status', array());
  foreach ($imports as $import) {
    $items = array();
    $key = $import['type'] . ':' . $import['value'];
    $last_import = isset($status[$key]) ? $status[$key] : 0;
    $all = !empty($import['options']['all']);

    $params = array(
      'fields' => _scald_dailymotion_api_fields(),
      'limit' => variable_get('scald_dailymotion_imports_max_items', SCALD_DAILYMOTION_MAX_ITEMS),
      'created_after' => $last_import,
      'sort' => $all ? 'old' : 'recent',
    );

    switch ($import['type']) {
      case 'user':
        $method = 'user/' . $import['value'] . '/videos';
        break;

      case 'tag':
        $method = 'videos';
        $params['tags'] = $import['value'];
        break;
    }

    $data = _scald_dailymotion_api_call($method, $params);
    if ($data && $data->list) {
      $items = $data->list;
      $status[$key] = $items[$all ? count($items) - 1 : 0]->created_time;
      variable_set('scald_dailymotion_imports_status', $status);
    }

    if ($items) {
      foreach ($items as $item) {
        scald_dailymotion_direct_import($item);
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function scald_dailymotion_menu() {
  $items = array();
  $items['admin/config/media/scald_dailymotion'] = array(
    'title' => 'Dailymotion imports',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scald_dailymotion_imports_form'),
    'access arguments' => array('administer dailymotion imports'),
    'description' => 'Configure the videos that should be automatically imported from Dailymotion',
    'file' => 'scald_dailymotion.admin.inc',
  );

  $items['atoms/dailymotion/search'] = array(
    'title' => 'Dailymotion Video search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scald_dailymotion_search_form', 2),
    'access arguments' => array('import dailymotion videos'),
    'description' => 'Search for new videos to import into this site',
    'file' => 'scald_dailymotion.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['atoms/dailymotion/import'] = array(
    'title' => 'Dailymotion Video import',
    'page callback' => 'scald_dailymotion_import',
    'page arguments' => array(),
    'access arguments' => array('import dailymotion videos'),
    'description' => 'Import a video',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Function to direct import.
 *
 * Automatically creates an atom based on a Dailymotion id or
 * an object containing the video informations.
 *
 * This function is used by the CRON importer and does not require user
 * intervention.
 *
 * @param mixed $video
 *   Unique identifier of the video on dailymotion, or object
 *   returned by scald_dailymotion_video.
 *
 * @return int
 *   Unique identifier of the new atom
 */
function scald_dailymotion_direct_import($video) {
  // Fetch the needed informations from Dailymotion.
  if (is_object($video)) {
    _scald_dailymotion_api_legacy($video);
  }
  else {
    $video = scald_dailymotion_video($video);
    if (!is_object($video)) {
      return FALSE;
    }
  }

  // Check if the video has already been imported to prevent duplicate.
  if (scald_dailymotion_already_imported($video->id)) {
    return FALSE;
  }

  $atom = scald_dailymotion_create_atom($video);
  return scald_atom_save($atom);
}

/**
 * Get a taxonomy term by name from a given vocabulary.
 *
 * Create the term if no matches found.
 *
 * @param string $name
 *   The name or the taxonomy term.
 * @param string $machine_name
 *   Vocabulary Machine Name to search and create from/to.
 *
 * @return object
 *   The taxonomy term or NULL if it didn't existed before and creation failed.
 */
function scald_dailymotion_taxonomy_get_create($name, $machine_name) {
  // Remove extra white spaces.
  $name = trim($name);

  // Find existing term(s).
  $terms = taxonomy_get_term_by_name($name, $machine_name);

  if (!count($terms)) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);

    if ($vocabulary) {
      // Create a new term.
      $term = new stdClass();
      $term->name = trim($name);
      $term->vid = $vocabulary->vid;
      taxonomy_term_save($term);
    }
    else {
      return NULL;
    }
  }
  else {
    // Get the first found term.
    $term = reset($terms);
  }

  return $term;
}

/**
 * Get information on a specific video.
 *
 * Note the the return structure for thumbnail has been changed. There is no
 * longer width/height attributes.
 *
 * @param int $id
 *   The video id.
 *
 * @return object
 *   An object containing the video informations.
 */
function scald_dailymotion_video($id) {
  // Use cache for better performance when the same request is used multiple
  // times per page load.
  $cache = &drupal_static(__FUNCTION__);
  if (isset($cache[$id])) {
    return $cache[$id];
  }

  $video = _scald_dailymotion_api_call('video/' . $id, array('fields' => _scald_dailymotion_api_fields()));

  if ($video) {
    _scald_dailymotion_api_legacy($video);

    // If we've just used a key instead of a real identifier to get the
    // video data, then reuse that as the video id, to make sure things
    // don't break down the line.
    if ($video->private) {
      $video->id = $id;
    }
  }

  return $cache[$id] = $video;
}

/**
 * Try to add back the legacy data which was available via RSS.
 */
function _scald_dailymotion_api_legacy($video) {
  _scald_daimotion_video_calculate_dimensions($video);
  $video->author = $video->{'owner.username'};
  $video->thumbnail = array('src' => $video->thumbnail_url);
  $video->license = 'DM';
}

/**
 * Checks if a video has already been imported, based on its video id.
 *
 * @param int $id
 *   The video identifier.
 *
 * @return mixed
 *   FALSE if the video was never imported, the scald identifier of
 *   the video otherwise.
 */
function scald_dailymotion_already_imported($id) {
  $query = array('provider' => 'scald_dailymotion', 'base_id' => $id);
  return scald_search($query, FALSE, TRUE);
}

/**
 * Form element validation handler for Dailymotion identifier.
 */
function scald_dailymotion_validate_id($element, &$form_state) {
  $id = scald_dailymotion_parse_id($form_state['values']['identifier']);
  if (!$id) {
    form_error($element, t('Invalid Dailymotion video identifier.'));
  }
  elseif (scald_dailymotion_already_imported($id)) {
    form_error($element, t('Dailymotion video already imported.'));
  }
}

/**
 * Parse an Dailymotion ID and check validity.
 */
function scald_dailymotion_parse_id($string) {
  $string = trim($string);
  if (!preg_match('/^[a-zA-Z0-9]+$/', $string)) {
    // Full URL.
    if (preg_match('#https?://(www\.dailymotion\.com/video|dai\.ly)/(?<id>[a-zA-Z0-9]+)_#', $string, $match)) {
      $id = $match['id'];
    }
    // Or embed URL.
    elseif (preg_match('#https?://www\.dailymotion\.com/[a-z]+/video/(?<id>[a-zA-Z0-9]+)#', $string, $match)) {
      $id = $match['id'];
    }
  }
  else {
    $id = $string;
  }

  if (isset($id)) {
    // Last check to confirm this video really exists on Dailymotion.
    if (scald_dailymotion_video($id)) {
      return $id;
    }
  }
}

/**
 * Import proxy page, fill the identifier.
 */
function scald_dailymotion_import() {
  // The edit page is nothing else other than the add page, at the Add step. We
  // prepare data for this step then send back to the add page.
  $types = scald_types();
  $storage = array(
    'type' => $types['video'],
    'source' => 'scald_dailymotion',
  );
  ctools_include('object-cache');
  ctools_object_cache_set('scald_atom', 'add', $storage);

  module_load_include('inc', 'scald', 'includes/scald.pages');
  return scald_atom_add_page(FALSE, $types['video'], 'add');
}
