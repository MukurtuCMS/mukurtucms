<?php

class MailcommentNotificationsTestCase extends DrupalWebTestCase {
  protected $mailcomment_user;

  public static function getInfo() {
    return array(
      'name' => 'Mail Comment Notifications integration',
      'description' => 'Check that Mail Comment signatures are inserted into emails generated by notifications.',
      'group' => 'Mail Comment',
    );
  }

  function setUp() {
    parent::setUp('mailcomment_notifications', 'messaging_mail', 'notifications_content', 'notifications_ui', 'comment', 'mailhandler_php_imap', 'mailcomment_default');
    $this->mailcomment_user = $this->drupalCreateUser(array('subscribe to content type', 'create subscriptions', 'maintain own subscriptions', 'administer nodes', 'bypass node access', 'post comments', 'skip comment approval', 'administer mailhandler', 'administer feeds', 'administer notifications'));
    $this->drupalLogin($this->mailcomment_user);
    variable_set('mailcomment_mailbox', 'test@example.com');
  }

  public function createMailbox($filename) {
    $edit = array();
    $edit['admin_title'] = $filename . '@example.com';
    $edit['mail'] = $filename . '_example_com';
    $edit['settings[type]'] = 'local';
    $path = drupal_realpath('public://' . $filename);
    $rel_path = strstr($path, 'sites');
    // Nasty hack to deal with misbehaving testbots.
    if (strstr(substr($rel_path, 5), 'sites')) {
      $rel_path = strstr(substr($rel_path, 5), 'sites');
    }
    $edit['settings[folder]'] = $rel_path;
    $edit['settings[flag_after_read]'] = FALSE;
    $edit['settings[delete_after_read]'] = FALSE;
    $this->drupalGet('admin/structure/mailhandler/add');
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertText(t('@title has been created.', array('@title' => $filename . '_example_com')));
  }

  public function testMailcommentNotifications() {
    // Fix feeds importer.
    $edit = array();
    $edit['filter'] = 'MailhandlerFilters';
    $this->drupalPost('admin/structure/feeds/mailhandler_comments/settings/MailhandlerFetcher', $edit, t('Save'));

    // Save mailcomment page to set server string.
    $edit = array();
    $this->drupalPost('admin/config/system/mailcomment', $edit, t('Save configuration'));

    // Create a new content-type for subscribing to.
    $ctype = $this->drupalCreateContentType();

    // Subscribe to content type.
    $edit = array();
    $edit['subscription_fields[0]'] = $ctype->type;
    $this->drupalPost('notifications/subscription/add/content_type', $edit, t('Create subscription'));

    // Create node.
    $settings = array(
      'type' => $ctype->type,
      'title' => $this->randomName(8),
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
    );

    $edit = array();
    $edit['title'] = $this->randomName(8);
    $this->drupalPost('node/add/' . $ctype->type, $edit, t('Save'));
    $this->assertMailString('body', '((( Reply ABOVE this LINE to POST a COMMENT )))', 1);

    // Save email to mbox file.
    $mails = $this->drupalGetMails();
    foreach ($mails as $mail) {
      $mbox_data = "";
      $mail['headers']['From'] = $this->mailcomment_user->name . " <" . $this->mailcomment_user->mail . ">";
      $mail['headers']['To'] = "test@example.com";
      foreach ($mail['headers'] as $key => $value) {
        $mbox_data .= $key . ': ' . $value . "\n";
      }
      $mbox_data .= "X-IMAPbase: 1335812889 1\nStatus:\nX-Status:\nX-Keywords:\nX-UID: 1\n\n";
      $mbox_data .= $mail['body'];
      $mbox_file = file_save_data($mbox_data, 'public://test_mbox');
    }

    // Create mailbox to read mbox file.
    $this->createMailbox($mbox_file->filename);
    $edit = array();
    $edit['feeds[MailhandlerParser][auth_required]'] = FALSE;
    $this->drupalPost('import/mailhandler_comments', $edit, t('Import'));
    $this->assertText(t('Created 1 comment.'));

    // Now test with aggressive filter.
    $edit = array();
    $edit['mailcomment_import_filter_mode'] = 2;
    $this->drupalPost('admin/config/system/mailcomment', $edit, t('Save configuration'));

    // Delete existing comments.
    $edit = array();
    $this->drupalPost('import/mailhandler_comments/delete-items', $edit, t('Delete'));

    // Import comment.
    $edit = array();
    $this->drupalPost('import/mailhandler_comments', $edit, t('Import'));
    $this->assertText(t('Created 1 comment.'));
  }
}
